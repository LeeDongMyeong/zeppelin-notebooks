{"paragraphs":[{"text":"%md\n\n## Spark Core (RDDs) and Spark SQL Module\n#### Analyzing a Text File\n\n**Level**: Beginner\n**Language**: Python\n**Requirements**: \n- [HDP 2.6](http://hortonworks.com/products/sandbox/) (or later) or [HDCloud](https://hortonworks.github.io/hdp-aws/)\n- Spark 2.x\n\n**Author**: Robert Hryniewicz\n**Follow** [@RobertH8z](https://twitter.com/RobertH8z)","user":"admin","dateUpdated":"2017-02-18T06:13:05+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Spark Core (RDDs) and Spark SQL Module</h2>\n<h4>Analyzing a Text File</h4>\n<p><strong>Level</strong>: Beginner<br/><strong>Language</strong>: Python<br/><strong>Requirements</strong>:<br/>- <a href=\"http://hortonworks.com/products/sandbox/\">HDP 2.6</a> (or later) or <a href=\"https://hortonworks.github.io/hdp-aws/\">HDCloud</a><br/>- Spark 2.x</p>\n<p><strong>Author</strong>: Robert Hryniewicz<br/><strong>Follow</strong> <a href=\"https://twitter.com/RobertH8z\">@RobertH8z</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163817_1077079436","id":"20160331-233830_1876799966","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:13:05+0000","dateFinished":"2017-02-18T06:13:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:393"},{"title":"Introduction","text":"%md\nThis lab consists of two parts. In each section you will perform a basic Word Count.\n\nIn **Part 1**, we will introduce **Resilient Distributed Datasets** (RDDs), Spark's primary low-level abstraction, and several core concepts.\nIn **Part 2**, we will introduce **DataFrames**, a higher-level abstraction than RDDs, along with Spark SQL Module allowing you to use SQL statements to query a temporary view.","user":"admin","dateUpdated":"2017-02-18T05:54:12+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":217,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>This lab consists of two parts. In each section you will perform a basic Word Count.</p>\n<p>In <strong>Part 1</strong>, we will introduce <strong>Resilient Distributed Datasets</strong> (RDDs), Spark&rsquo;s primary low-level abstraction, and several core concepts.<br/>In <strong>Part 2</strong>, we will introduce <strong>DataFrames</strong>, a higher-level abstraction than RDDs, along with Spark SQL Module allowing you to use SQL statements to query a temporary view.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163817_1077079436","id":"20160331-233830_1038788941","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:54:12+0000","dateFinished":"2017-02-18T05:54:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:394"},{"title":"Concepts","text":"%md\nAt the core of Spark is the notion of a Resilient Distributed Dataset (RDD), which is an immutable and fault-tolerant collection of objects that is partitioned and distributed across multiple physical nodes on a cluster and they run in parallel.\n\nTypically, RDDs are instantiated by loading data from a shared filesystem, HDFS, HBase, or any data source offering a Hadoop InputFormat on a YARN cluster.\n\nOnce an RDD is instantiated, you can apply a **[series of operations](https://spark.apache.org/docs/latest/programming-guide.html#rdd-operations)**.\n\nAll operations fall into one of two types: **[Transformations](https://spark.apache.org/docs/latest/programming-guide.html#transformations)** or **[Actions](https://spark.apache.org/docs/latest/programming-guide.html#actions)**. \n\nTransformation operations, as the name suggests, create new datasets from an existing RDD and build out the processing Directed Acyclic Graph (DAG) that can then be applied on the partitioned dataset across the YARN cluster. An Action operation, on the other hand, executes DAG and returns a value.\n\nIn this lab we will use the following **[Transformations](https://spark.apache.org/docs/latest/programming-guide.html#transformations)**:\n- map(func)\n- filter(func)\n- flatMap(func)\n- reduceByKey(func)\n\nand **[Actions](https://spark.apache.org/docs/latest/programming-guide.html#actions)**:\n\n- collect()\n- count()\n- take()\n- takeOrdered(n, [ordering])\n- countByKey()\n\nA typical Spark application has the following four phases:\n1. Instantiate Input RDDs\n2. Transform RDDs\n3. Persist Intermediate RDDs\n4. Take Action on RDDs","user":"admin","dateUpdated":"2017-02-18T05:54:36+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>At the core of Spark is the notion of a Resilient Distributed Dataset (RDD), which is an immutable and fault-tolerant collection of objects that is partitioned and distributed across multiple physical nodes on a cluster and they run in parallel.</p>\n<p>Typically, RDDs are instantiated by loading data from a shared filesystem, HDFS, HBase, or any data source offering a Hadoop InputFormat on a YARN cluster.</p>\n<p>Once an RDD is instantiated, you can apply a <strong><a href=\"https://spark.apache.org/docs/latest/programming-guide.html#rdd-operations\">series of operations</a></strong>.</p>\n<p>All operations fall into one of two types: <strong><a href=\"https://spark.apache.org/docs/latest/programming-guide.html#transformations\">Transformations</a></strong> or <strong><a href=\"https://spark.apache.org/docs/latest/programming-guide.html#actions\">Actions</a></strong>. </p>\n<p>Transformation operations, as the name suggests, create new datasets from an existing RDD and build out the processing Directed Acyclic Graph (DAG) that can then be applied on the partitioned dataset across the YARN cluster. An Action operation, on the other hand, executes DAG and returns a value.</p>\n<p>In this lab we will use the following <strong><a href=\"https://spark.apache.org/docs/latest/programming-guide.html#transformations\">Transformations</a></strong>:<br/>- map(func)<br/>- filter(func)<br/>- flatMap(func)<br/>- reduceByKey(func)</p>\n<p>and <strong><a href=\"https://spark.apache.org/docs/latest/programming-guide.html#actions\">Actions</a></strong>:</p>\n<ul>\n  <li>collect()</li>\n  <li>count()</li>\n  <li>take()</li>\n  <li>takeOrdered(n, [ordering])</li>\n  <li>countByKey()</li>\n</ul>\n<p>A typical Spark application has the following four phases:<br/>1. Instantiate Input RDDs<br/>2. Transform RDDs<br/>3. Persist Intermediate RDDs<br/>4. Take Action on RDDs</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163818_1078233682","id":"20160331-233830_2031164924","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:54:36+0000","dateFinished":"2017-02-18T05:54:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:395"},{"title":"How to run a paragraph?","text":"%md\nTo run a paragraph in a Zeppelin notebook you can either click the `play` button (blue triangle) on the right-hand side or simply press `Shift + Enter`.","user":"admin","dateUpdated":"2017-02-18T05:55:27+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>To run a paragraph in a Zeppelin notebook you can either click the <code>play</code> button (blue triangle) on the right-hand side or simply press <code>Shift + Enter</code>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163818_1078233682","id":"20160331-233830_981276249","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:55:27+0000","dateFinished":"2017-02-18T05:55:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:396"},{"title":"Check Spark Version (should be 2.x)","text":"%spark2\n\nspark.version","user":"admin","dateUpdated":"2017-02-18T05:55:50+0000","config":{"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"scala"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres16: String = 2.1.0.2.6.0.0-422\n"}]},"apps":[],"jobName":"paragraph_1487397163818_1078233682","id":"20160331-233830_1782991630","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:55:50+0000","dateFinished":"2017-02-18T05:55:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:397"},{"text":"%md \n\n## Part 1\n#### Introduction to RDDs (Spark Core) with Word Count example","user":"admin","dateUpdated":"2017-02-18T05:55:56+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Part 1</h2>\n<h4>Introduction to RDDs (Spark Core) with Word Count example</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163818_1078233682","id":"20160331-233830_682697678","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:55:56+0000","dateFinished":"2017-02-18T05:55:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:398"},{"text":"%md\nIn this section you will perform a basic word count with RDDs.\n\nYou will download external text data file to your sandbox. Then you will perform lexical analysis, or tokenization, by breaking up text into words/tokens.\nThe list of tokens then becomes an input for further processing to this and following sections.\n\nBy the end of this section you should have learned how to perform low-level transformations and actions with Spark RDDs and lambda expressions.","user":"admin","dateUpdated":"2017-02-18T05:56:10+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>In this section you will perform a basic word count with RDDs.</p>\n<p>You will download external text data file to your sandbox. Then you will perform lexical analysis, or tokenization, by breaking up text into words/tokens.<br/>The list of tokens then becomes an input for further processing to this and following sections.</p>\n<p>By the end of this section you should have learned how to perform low-level transformations and actions with Spark RDDs and lambda expressions.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163818_1078233682","id":"20160331-233830_94748225","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:56:10+0000","dateFinished":"2017-02-18T05:56:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:399"},{"title":"Interpreters","text":"%md\n\nIn the following paragraphs we are going to execute Spark code, run shell commands to download and move files, run sql queries etc. Each paragraph will start with `%` followed by an interpreter name, e.g. `%spark2.pyspark` for a Spark 2.x Python interpreter. Different interpreter names indicate what will be executed: code, markdown, html etc. This allows you to perform data ingestion, munging, wrangling, visualization, analysis, processing and more, all in one place!\n\nThroughtout this notebook we will use the following interpreters:\n\n- `%spark2.pyspark` - Spark Python interpreter to run Spark 2.x code written in Python 2.x\n- `%spark2` - Spark interpreter to run Spark 2.x code written in Scala (we'll only use to check Spark version)\n- `%spark2.sql` - Spark SQL interprter (to execute SQL queries against temporary tables in Spark 2.x)\n- `%sh` - Shell interpreter to run shell commands\n- `%angular` - Angular interpreter to run Angular and HTML code\n- `%md` - Markdown for displaying formatted text, links, and images\n\nTo learn more about Zeppelin interpreters check out this [link](https://zeppelin.apache.org/docs/0.5.6-incubating/manual/interpreters.html).","user":"admin","dateUpdated":"2017-02-18T06:13:05+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>In the following paragraphs we are going to execute Spark code, run shell commands to download and move files, run sql queries etc. Each paragraph will start with <code>%</code> followed by an interpreter name, e.g. <code>%spark2.pyspark</code> for a Spark 2.x Python interpreter. Different interpreter names indicate what will be executed: code, markdown, html etc. This allows you to perform data ingestion, munging, wrangling, visualization, analysis, processing and more, all in one place!</p>\n<p>Throughtout this notebook we will use the following interpreters:</p>\n<ul>\n  <li><code>%spark2.pyspark</code> - Spark Python interpreter to run Spark 2.x code written in Python 2.x</li>\n  <li><code>%spark2</code> - Spark interpreter to run Spark 2.x code written in Scala (we&rsquo;ll only use to check Spark version)</li>\n  <li><code>%spark2.sql</code> - Spark SQL interprter (to execute SQL queries against temporary tables in Spark 2.x)</li>\n  <li><code>%sh</code> - Shell interpreter to run shell commands</li>\n  <li><code>%angular</code> - Angular interpreter to run Angular and HTML code</li>\n  <li><code>%md</code> - Markdown for displaying formatted text, links, and images</li>\n</ul>\n<p>To learn more about Zeppelin interpreters check out this <a href=\"https://zeppelin.apache.org/docs/0.5.6-incubating/manual/interpreters.html\">link</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163818_1078233682","id":"20160331-233830_1148035148","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:13:05+0000","dateFinished":"2017-02-18T06:13:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:400"},{"title":"Prepare Directories and Download a Dataset","text":"%sh\n\n#  Remove old dataset file if already exists in local /tmp directory\nif [ -e /tmp/nifi.txt ]\nthen\n    rm -f /tmp/nifi.txt\nfi\n\n# Remove old dataset if already exists in hadoop /tmp directory\nif hadoop fs -stat /tmp/nifi.txt\nthen\n   hadoop fs -rm  /tmp/nifi.txt\nfi\n\n# Download \"About-Apache-NiFi\" text file\nwget https://raw.githubusercontent.com/roberthryniewicz/datasets/master/About-Apache-NiFi.txt -O /tmp/nifi.txt\n\n# Move dataset to hadoop /tmp\nhadoop fs -put /tmp/nifi.txt /tmp","user":"admin","dateUpdated":"2017-02-18T05:58:47+0000","config":{"editorMode":"ace/mode/sh","colWidth":12,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"sh"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"stat: `/tmp/nifi.txt': No such file or directory\n--2017-02-18 05:58:49--  https://raw.githubusercontent.com/roberthryniewicz/datasets/master/About-Apache-NiFi.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.52.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.52.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 15725 (15K) [text/plain]\nSaving to: ‘/tmp/nifi.txt’\n\n     0K .......... .....                                      100% 2.22M=0.007s\n\n2017-02-18 05:58:49 (2.22 MB/s) - ‘/tmp/nifi.txt’ saved [15725/15725]\n\n"}]},"apps":[],"jobName":"paragraph_1487397163819_1077848933","id":"20160331-233830_2033647788","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:58:48+0000","dateFinished":"2017-02-18T05:58:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:401"},{"title":"Preview Downloaded Text File","text":"%sh\n\nhadoop fs -cat /tmp/nifi.txt | head","user":"admin","dateUpdated":"2017-02-18T05:58:56+0000","config":{"editorMode":"ace/mode/sh","colWidth":12,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"sh"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Apache NiFi Overview \nTeam dev@nifi.apache.org \n\nWhat is Apache NiFi? Put simply NiFi was built to automate the flow of data between systems. While the term dataflow is used in a variety of contexts, we’ll use it here to mean the automated and managed flow of information between systems. This problem space has been around ever since enterprises had more than one system, where some of the systems created data and some of the systems consumed data. The problems and solution patterns that emerged have been discussed and articulated extensively. A comprehensive and readily consumed form is found in the Enterprise Integration Patterns [eip]. \n\nSome of the high-level challenges of dataflow include: \n\nSystems fail \nNetworks fail, disks fail, software crashes, people make mistakes. \n\n"}]},"apps":[],"jobName":"paragraph_1487397163819_1077848933","id":"20160331-233830_168647264","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:58:56+0000","dateFinished":"2017-02-18T05:58:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:402"},{"title":"SparkSession in Zeppelin","text":"%md\nNote that the main entry point (starting with Spark 2.x) is `spark` (for SparkSession) and it is automatically initialized within Zeppelin.","user":"admin","dateUpdated":"2017-02-18T05:59:23+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Note that the main entry point (starting with Spark 2.x) is <code>spark</code> (for SparkSession) and it is automatically initialized within Zeppelin.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163819_1077848933","id":"20160331-233830_1923635655","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:59:23+0000","dateFinished":"2017-02-18T05:59:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:403"},{"title":"Read Text File from HDFS and Preview its Contents","text":"%spark2.pyspark\n\n# Parallelize text file using pre-initialized SparkSession\nlines = spark.sparkContext.textFile(\"hdfs:///tmp/nifi.txt\")\n\n# Take a look at a few lines with a take() action.\nprint lines.take(10)","user":"admin","dateUpdated":"2017-02-18T05:59:59+0000","config":{"tableHide":false,"editorMode":"ace/mode/python","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[u'Apache NiFi Overview ', u'Team dev@nifi.apache.org ', u'', u'What is Apache NiFi? Put simply NiFi was built to automate the flow of data between systems. While the term dataflow is used in a variety of contexts, we\\u2019ll use it here to mean the automated and managed flow of information between systems. This problem space has been around ever since enterprises had more than one system, where some of the systems created data and some of the systems consumed data. The problems and solution patterns that emerged have been discussed and articulated extensively. A comprehensive and readily consumed form is found in the Enterprise Integration Patterns [eip]. ', u'', u'Some of the high-level challenges of dataflow include: ', u'', u'Systems fail ', u'Networks fail, disks fail, software crashes, people make mistakes. ', u'']\n"}]},"apps":[],"jobName":"paragraph_1487397163819_1077848933","id":"20160331-233830_541232082","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T05:59:59+0000","dateFinished":"2017-02-18T05:59:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:404"},{"text":"%md\nIn the next paragraphs we will start using Python lambda (or anonymous) functions. If you're unfamiliar with lambda expressions, \nreview **[Python Lambda Expressions](https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions)** before proceeding.","user":"admin","dateUpdated":"2017-02-18T06:00:04+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>In the next paragraphs we will start using Python lambda (or anonymous) functions. If you&rsquo;re unfamiliar with lambda expressions,<br/>review <strong><a href=\"https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions\">Python Lambda Expressions</a></strong> before proceeding.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163819_1077848933","id":"20160331-233830_1894357129","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:00:04+0000","dateFinished":"2017-02-18T06:00:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:405"},{"title":"Extract All Words from the Document","text":"%spark2.pyspark\n# Here we're tokenizing our text file by using the split() function. Each original line of text is split into words or tokens on a single space.\n#  Also, since each line of the original text occupies a seperate bucket in the array, we need to use\n#  a flatMap() transformation to flatten all buckets into a asingle/flat array of tokens.\n\nwords = lines.flatMap(lambda line: line.split(\" \"))","user":"admin","dateUpdated":"2017-02-18T06:00:14+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"title":true,"results":[],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1487397163819_1077848933","id":"20160331-233830_2015200328","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:00:14+0000","dateFinished":"2017-02-18T06:00:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:406"},{"text":"%md\nNote that after you click `play` in the paragraph above \"nothing\" appears to happen.\n\nThat's because `flatMap()` is a **transformation** and all transformations in Spark are lazy, in that they do not compute their results right away. Instead, they just remember the transformations applied to some base dataset (e.g. a file). The transformations are only computed when an action requires a result to be returned to the driver program. This design enables Spark to run more efficiently – for example, we can realize that a dataset created through map will be used in a reduce and return only the result of the reduce to the driver, rather than the larger mapped dataset.\n\nBy default, each transformed RDD may be recomputed each time you run an action on it. However, you may also persist an RDD in memory using the persist (or cache) method, in which case Spark will keep the elements around on the cluster for much faster access the next time you query it. There is also support for persisting RDDs on disk, or replicated across multiple nodes.","user":"admin","dateUpdated":"2017-02-18T06:01:08+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Note that after you click <code>play</code> in the paragraph above &ldquo;nothing&rdquo; appears to happen.</p>\n<p>That&rsquo;s because <code>flatMap()</code> is a <strong>transformation</strong> and all transformations in Spark are lazy, in that they do not compute their results right away. Instead, they just remember the transformations applied to some base dataset (e.g. a file). The transformations are only computed when an action requires a result to be returned to the driver program. This design enables Spark to run more efficiently – for example, we can realize that a dataset created through map will be used in a reduce and return only the result of the reduce to the driver, rather than the larger mapped dataset.</p>\n<p>By default, each transformed RDD may be recomputed each time you run an action on it. However, you may also persist an RDD in memory using the persist (or cache) method, in which case Spark will keep the elements around on the cluster for much faster access the next time you query it. There is also support for persisting RDDs on disk, or replicated across multiple nodes.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163819_1077848933","id":"20160331-233830_1507315859","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:01:08+0000","dateFinished":"2017-02-18T06:01:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:407"},{"title":"Take a look at first 100 words","text":"%spark2.pyspark\nprint words.take(100)   # we're using a take(n) action\n\n# Output: As you can see, each word occupies a distinc array bucket.","user":"admin","dateUpdated":"2017-02-18T06:01:46+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[u'Apache', u'NiFi', u'Overview', u'', u'Team', u'dev@nifi.apache.org', u'', u'', u'What', u'is', u'Apache', u'NiFi?', u'Put', u'simply', u'NiFi', u'was', u'built', u'to', u'automate', u'the', u'flow', u'of', u'data', u'between', u'systems.', u'While', u'the', u'term', u'dataflow', u'is', u'used', u'in', u'a', u'variety', u'of', u'contexts,', u'we\\u2019ll', u'use', u'it', u'here', u'to', u'mean', u'the', u'automated', u'and', u'managed', u'flow', u'of', u'information', u'between', u'systems.', u'This', u'problem', u'space', u'has', u'been', u'around', u'ever', u'since', u'enterprises', u'had', u'more', u'than', u'one', u'system,', u'where', u'some', u'of', u'the', u'systems', u'created', u'data', u'and', u'some', u'of', u'the', u'systems', u'consumed', u'data.', u'The', u'problems', u'and', u'solution', u'patterns', u'that', u'emerged', u'have', u'been', u'discussed', u'and', u'articulated', u'extensively.', u'A', u'comprehensive', u'and', u'readily', u'consumed', u'form', u'is', u'found']\n"}]},"apps":[],"jobName":"paragraph_1487397163819_1077848933","id":"20160331-233830_1740542201","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:01:46+0000","dateFinished":"2017-02-18T06:01:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:408"},{"title":"Remove Empty Words","text":"%spark2.pyspark\n\nwordsFiltered = words.filter(lambda w: len(w) > 0)","user":"admin","dateUpdated":"2017-02-18T06:01:52+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"editorHide":false,"title":true,"results":[],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1487397163820_1075925189","id":"20160331-233830_270532773","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:01:52+0000","dateFinished":"2017-02-18T06:01:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:409"},{"title":"Get Total Number of Words","text":"%spark2.pyspark\n\nprint wordsFiltered.count()     # using a count() action","user":"admin","dateUpdated":"2017-02-18T06:01:59+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"2517\n"}]},"apps":[],"jobName":"paragraph_1487397163820_1075925189","id":"20160331-233830_229739488","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:01:59+0000","dateFinished":"2017-02-18T06:01:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:410"},{"text":"%md\n#### Word Counts\n\nLet's see what are the most popular words by performing a word count using `map()` and `reduceByKey()` transformations to create tuples of type (word, count).","user":"admin","dateUpdated":"2017-02-18T06:02:07+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Word Counts</h4>\n<p>Let&rsquo;s see what are the most popular words by performing a word count using <code>map()</code> and <code>reduceByKey()</code> transformations to create tuples of type (word, count).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163820_1075925189","id":"20160331-233830_55977510","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:02:07+0000","dateFinished":"2017-02-18T06:02:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:411"},{"title":"Word count with a RDD","text":"%spark2.pyspark\n\nwordCounts = wordsFiltered.map(lambda word: (word, 1)).reduceByKey(lambda a,b: a+b)","user":"admin","dateUpdated":"2017-02-18T06:02:13+0000","config":{"tableHide":false,"editorMode":"ace/mode/python","colWidth":12,"title":false,"results":[],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1487397163820_1075925189","id":"20160331-233830_216173184","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:02:13+0000","dateFinished":"2017-02-18T06:02:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:412"},{"text":"%md\n#### View Word Count Tuples\nNow let's take a look at top 100 words in descending order with a `takeOrdered()` action.","user":"admin","dateUpdated":"2017-02-18T06:02:20+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>View Word Count Tuples</h4>\n<p>Now let&rsquo;s take a look at top 100 words in descending order with a <code>takeOrdered()</code> action.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163820_1075925189","id":"20160331-233830_1029129342","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:02:20+0000","dateFinished":"2017-02-18T06:02:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:413"},{"text":"%spark2.pyspark\nprint wordCounts.takeOrdered(100, lambda (w,c): -c)\n","user":"admin","dateUpdated":"2017-02-18T06:02:28+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[(u'the', 110), (u'of', 94), (u'and', 89), (u'to', 84), (u'is', 62), (u'a', 60), (u'NiFi', 41), (u'as', 32), (u'The', 28), (u'be', 26), (u'in', 25), (u'are', 22), (u'it', 22), (u'data', 20), (u'that', 20), (u'for', 19), (u'can', 19), (u'or', 19), (u'on', 17), (u'system', 16), (u'which', 14), (u'dataflow', 12), (u'will', 11), (u'flow', 11), (u'more', 11), (u'at', 11), (u'FlowFile', 9), (u'given', 9), (u'Flow', 9), (u'one', 9), (u'very', 8), (u'content', 8), (u'This', 8), (u'with', 8), (u'some', 8), (u'within', 8), (u'all', 7), (u'repository', 7), (u'use', 7), (u'A', 7), (u'Controller', 7), (u'where', 7), (u'other', 7), (u'how', 7), (u'then', 7), (u'even', 6), (u'through', 6), (u'Repository', 6), (u'make', 6), (u'well', 6), (u'each', 6), (u'their', 6), (u'between', 6), (u'an', 6), (u'threads', 5), (u'change', 5), (u'allow', 5), (u'they', 5), (u'For', 5), (u'Data', 5), (u'these', 5), (u'processes', 5), (u'flows', 5), (u'specific', 5), (u'default', 5), (u'cluster', 5), (u'designed', 5), (u'also', 5), (u'should', 5), (u'many', 5), (u'point', 5), (u'by', 5), (u'there', 5), (u'becomes', 5), (u'those', 4), (u'design', 4), (u'These', 4), (u'when', 4), (u'extensions', 4), (u'effective', 4), (u'so', 4), (u'have', 4), (u'able', 4), (u'Nodes', 4), (u'only', 4), (u'been', 4), (u'components', 4), (u'NiFi\\u2019s', 4), (u'JVM', 4), (u'host', 4), (u'about', 4), (u'extension', 4), (u'Processors', 4), (u'new', 4), (u'concepts', 4), (u'such', 4), (u'NCM', 4), (u'its', 4), (u'systems', 4), (u'Architecture', 4)]\n"}]},"apps":[],"jobName":"paragraph_1487397163820_1075925189","id":"20160331-233830_743558056","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:02:28+0000","dateFinished":"2017-02-18T06:02:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:414"},{"text":"%md\n#### Filter out infrequent words\nWe'll use `filter()` transformation to filter out words that occur less than five times.","user":"admin","dateUpdated":"2017-02-18T06:02:36+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Filter out infrequent words</h4>\n<p>We&rsquo;ll use <code>filter()</code> transformation to filter out words that occur less than five times.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163820_1075925189","id":"20160331-233830_772905299","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:02:36+0000","dateFinished":"2017-02-18T06:02:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:415"},{"text":"%spark2.pyspark\n\nfilteredWordCounts = wordCounts.filter(lambda (w,c): c >= 5)","user":"admin","dateUpdated":"2017-02-18T06:02:44+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"editorHide":false,"results":[],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1487397163820_1075925189","id":"20160331-233830_90779590","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:02:44+0000","dateFinished":"2017-02-18T06:02:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:416"},{"title":"Take a Look at Results","text":"%spark2.pyspark\n\nprint filteredWordCounts.collect()   # we're using a collect() action to pull everything back to the Spark driver","user":"admin","dateUpdated":"2017-02-18T06:02:53+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[(u'all', 7), (u'very', 8), (u'these', 5), (u'even', 6), (u'threads', 5), (u'change', 5), (u'use', 7), (u'A', 7), (u'data', 20), (u'allow', 5), (u'through', 6), (u'they', 5), (u'content', 8), (u'This', 8), (u'given', 9), (u'Repository', 6), (u'Data', 5), (u'a', 60), (u'and', 89), (u'which', 14), (u'The', 28), (u'flow', 11), (u'NiFi', 41), (u'FlowFile', 9), (u'processes', 5), (u'where', 7), (u'For', 5), (u'Flow', 9), (u'as', 32), (u'will', 11), (u'is', 62), (u'make', 6), (u'flows', 5), (u'well', 6), (u'the', 110), (u'specific', 5), (u'some', 8), (u'for', 19), (u'repository', 7), (u'Controller', 7), (u'dataflow', 12), (u'with', 8), (u'default', 5), (u'to', 84), (u'be', 26), (u'more', 11), (u'becomes', 5), (u'can', 19), (u'how', 7), (u'designed', 5), (u'or', 19), (u'then', 7), (u'each', 6), (u'there', 5), (u'one', 9), (u'system', 16), (u'their', 6), (u'that', 20), (u'also', 5), (u'should', 5), (u'are', 22), (u'between', 6), (u'many', 5), (u'point', 5), (u'it', 22), (u'cluster', 5), (u'in', 25), (u'by', 5), (u'on', 17), (u'of', 94), (u'within', 8), (u'an', 6), (u'at', 11), (u'other', 7)]\n"}]},"apps":[],"jobName":"paragraph_1487397163821_1075540440","id":"20160331-233830_1024657848","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:02:53+0000","dateFinished":"2017-02-18T06:02:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:417"},{"title":"","text":"%md\nNow let's use `countByKey()` action for another way of returning a word count.","user":"admin","dateUpdated":"2017-02-18T06:02:58+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now let&rsquo;s use <code>countByKey()</code> action for another way of returning a word count.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163821_1075540440","id":"20160331-233830_753086043","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:02:59+0000","dateFinished":"2017-02-18T06:02:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:418"},{"text":"%spark2.pyspark\n\nresult =  words.map(lambda w: (w,1)).countByKey()\n\n# Print type of data structure\nprint type(result)","user":"admin","dateUpdated":"2017-02-18T06:03:04+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<type 'collections.defaultdict'>\n"}]},"apps":[],"jobName":"paragraph_1487397163821_1075540440","id":"20160331-233830_1995992930","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:04+0000","dateFinished":"2017-02-18T06:03:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:419"},{"text":"%md\n**Note** that the **result** is an **unordered dictionary of type {word, count}**.\nSince this is a small set we can apply a simple (non-parallelizeable) python built-in function.\n","user":"admin","dateUpdated":"2017-02-18T06:03:11+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>Note</strong> that the <strong>result</strong> is an <strong>unordered dictionary of type {word, count}</strong>.<br/>Since this is a small set we can apply a simple (non-parallelizeable) python built-in function.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163821_1075540440","id":"20160331-233830_811124723","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:11+0000","dateFinished":"2017-02-18T06:03:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:420"},{"text":"%md\nTake a look at first 20 items in our dictionary.","user":"admin","dateUpdated":"2017-02-18T06:03:13+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Take a look at first 20 items in our dictionary.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163821_1075540440","id":"20160331-233830_347028305","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:13+0000","dateFinished":"2017-02-18T06:03:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:421"},{"text":"%spark2.pyspark\n# Print first 20 items\nprint result.items()[0:20]","user":"admin","dateUpdated":"2017-02-18T06:03:17+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[(u'', 110), (u'limited', 2), (u'all', 7), (u'concept', 1), (u'managed', 1), (u'contexts,', 1), (u'chain', 1), (u'indicating', 1), (u'partition.', 1), (u'existing', 1), (u'[iot],', 1), (u'executing', 1), (u'Routing,', 1), (u'manages', 2), (u'scale-out', 1), (u'/', 1), (u'invariably', 1), (u'Based', 1), (u'disk', 3), (u'CPU', 2)]\n"}]},"apps":[],"jobName":"paragraph_1487397163821_1075540440","id":"20160331-233830_2086620530","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:17+0000","dateFinished":"2017-02-18T06:03:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:422"},{"text":"%md\nApply a python `sorted()` function on the **result** dictionary values.","user":"admin","dateUpdated":"2017-02-18T06:03:21+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Apply a python <code>sorted()</code> function on the <strong>result</strong> dictionary values.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163821_1075540440","id":"20160331-233830_1423292200","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:21+0000","dateFinished":"2017-02-18T06:03:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:423"},{"text":"%spark2.pyspark\nimport operator\n\n# Sort in descending order\nsortedResult = sorted(result.items(), key=operator.itemgetter(1), reverse=True)\n\n# Print top 20 items\nprint sortedResult[0:20]","user":"admin","dateUpdated":"2017-02-18T06:03:26+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[(u'', 110), (u'the', 110), (u'of', 94), (u'and', 89), (u'to', 84), (u'is', 62), (u'a', 60), (u'NiFi', 41), (u'as', 32), (u'The', 28), (u'be', 26), (u'in', 25), (u'are', 22), (u'it', 22), (u'data', 20), (u'that', 20), (u'can', 19), (u'for', 19), (u'or', 19), (u'on', 17)]\n"}]},"apps":[],"jobName":"paragraph_1487397163822_1076694687","id":"20160331-233830_451661467","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:26+0000","dateFinished":"2017-02-18T06:03:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:424"},{"text":"%md\n## Part 2\n#### Introduction to DataFrames and SQL APIs (Spark SQL Module)","user":"admin","dateUpdated":"2017-02-18T06:03:32+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Part 2</h2>\n<h4>Introduction to DataFrames and SQL APIs (Spark SQL Module)</h4>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163822_1076694687","id":"20160331-233830_1867067371","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:32+0000","dateFinished":"2017-02-18T06:03:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:425"},{"text":"%md\nIn this section we will cover the concept of a DataFrame. You will convert RDDs from a previous section and then use higher level \noperations to demonstrate a different way of counting words. Then you will register a temporary table and perform a word count by \nexecuting a SQL query on that table.\n\nBy the end of the section you will have learned higher-level Spark abstractions that hide lower-level details, speed up prototyping and execution. ","user":"admin","dateUpdated":"2017-02-18T06:03:41+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>In this section we will cover the concept of a DataFrame. You will convert RDDs from a previous section and then use higher level<br/>operations to demonstrate a different way of counting words. Then you will register a temporary table and perform a word count by<br/>executing a SQL query on that table.</p>\n<p>By the end of the section you will have learned higher-level Spark abstractions that hide lower-level details, speed up prototyping and execution.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163822_1076694687","id":"20160331-233830_770254433","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:41+0000","dateFinished":"2017-02-18T06:03:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:426"},{"title":"DataFrame","text":"%md\nA DataFrame is a distributed collection of data organized into named columns. It is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood. DataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs. [See SparkSQL docs for more info](http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes).","user":"admin","dateUpdated":"2017-02-18T06:03:45+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>A DataFrame is a distributed collection of data organized into named columns. It is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood. DataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs. <a href=\"http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes\">See SparkSQL docs for more info</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163822_1076694687","id":"20160331-233830_634831315","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:45+0000","dateFinished":"2017-02-18T06:03:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:427"},{"text":"%md\nTransform your RDD into a DataFrame and perform DataFrame specific operations.","user":"admin","dateUpdated":"2017-02-18T06:03:50+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Transform your RDD into a DataFrame and perform DataFrame specific operations.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163822_1076694687","id":"20160331-233830_911152909","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:03:50+0000","dateFinished":"2017-02-18T06:03:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:428"},{"title":"Word Count with a DataFrame","text":"%spark2.pyspark\n\n# First, let's transform our RDD to a DataFrame.\n# We will use a Row to define column names.\nwordsCounts = (filteredWordCounts.map(lambda (w, c): \n                Row(word=w,\n                    count=c))\n                .toDF())\n\n# Print schema\nwordsCounts.printSchema()\n\n# Output: As you can see, the count and word types have been inferred without having to explicitly define long and string types respectively.","user":"admin","dateUpdated":"2017-02-18T06:04:19+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- count: long (nullable = true)\n |-- word: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1487397163822_1076694687","id":"20160331-233830_41054806","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:04:19+0000","dateFinished":"2017-02-18T06:04:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:429"},{"title":"Show top 20 rows","text":"%spark2.pyspark\n\n# Show top 20 rows\nwordsCounts.show()","user":"admin","dateUpdated":"2017-02-18T06:04:27+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+----------+\n|count|      word|\n+-----+----------+\n|    7|       all|\n|    8|      very|\n|    5|     these|\n|    6|      even|\n|    5|   threads|\n|    5|    change|\n|    7|       use|\n|    7|         A|\n|   20|      data|\n|    5|     allow|\n|    6|   through|\n|    5|      they|\n|    8|   content|\n|    8|      This|\n|    9|     given|\n|    6|Repository|\n|    5|      Data|\n|   60|         a|\n|   89|       and|\n|   14|     which|\n+-----+----------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1487397163822_1076694687","id":"20160331-233830_665873755","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:04:27+0000","dateFinished":"2017-02-18T06:04:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:430"},{"title":"Register a Temporary View","text":"%spark2.pyspark\n\nwordsCounts.createOrReplaceTempView(\"wordcounts\")","user":"admin","dateUpdated":"2017-02-18T06:04:34+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"title":true,"results":[],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1487397163822_1076694687","id":"20160331-233830_802915768","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:04:35+0000","dateFinished":"2017-02-18T06:04:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:431"},{"text":"%md\nNow we can query the temporary `wordcounts` table with a SQL statement.","user":"admin","dateUpdated":"2017-02-18T06:04:40+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now we can query the temporary <code>wordcounts</code> table with a SQL statement.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163823_1076309938","id":"20160331-233830_1965558675","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:04:40+0000","dateFinished":"2017-02-18T06:04:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:432"},{"text":"%md\nTo execute a SparkSQL query we prepend a block of SQL code with a `%sql` line.","user":"admin","dateUpdated":"2017-02-18T06:04:44+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>To execute a SparkSQL query we prepend a block of SQL code with a <code>%sql</code> line.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163823_1076309938","id":"20160331-233830_403708924","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:04:44+0000","dateFinished":"2017-02-18T06:04:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:433"},{"title":"","text":"%spark2.sql\n\n-- Display word counts in descending order\nSELECT word, count FROM wordcounts ORDER BY count DESC","user":"admin","dateUpdated":"2017-02-18T06:04:49+0000","config":{"tableHide":false,"editorMode":"ace/mode/sql","colWidth":12,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"word","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"word","index":0,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"word\tcount\nthe\t110\nof\t94\nand\t89\nto\t84\nis\t62\na\t60\nNiFi\t41\nas\t32\nThe\t28\nbe\t26\nin\t25\nare\t22\nit\t22\ndata\t20\nthat\t20\ncan\t19\nfor\t19\nor\t19\non\t17\nsystem\t16\nwhich\t14\ndataflow\t12\nwill\t11\nmore\t11\nflow\t11\nat\t11\nFlow\t9\nFlowFile\t9\none\t9\ngiven\t9\nvery\t8\nThis\t8\nwith\t8\ncontent\t8\nsome\t8\nwithin\t8\nwhere\t7\nother\t7\nrepository\t7\nall\t7\nthen\t7\nhow\t7\nController\t7\nA\t7\nuse\t7\nthrough\t6\nbetween\t6\nmake\t6\nan\t6\neven\t6\neach\t6\ntheir\t6\nRepository\t6\nwell\t6\nthese\t5\nthreads\t5\nthere\t5\nchange\t5\nFor\t5\nmany\t5\nalso\t5\nshould\t5\nallow\t5\nflows\t5\nbecomes\t5\npoint\t5\nthey\t5\nData\t5\nspecific\t5\ndesigned\t5\ncluster\t5\nby\t5\nprocesses\t5\ndefault\t5\n"}]},"apps":[],"jobName":"paragraph_1487397163823_1076309938","id":"20160331-233830_1235044795","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:04:49+0000","dateFinished":"2017-02-18T06:04:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:434"},{"text":"%md\nNow let's take a step back and perform a word count with SQL","user":"admin","dateUpdated":"2017-02-18T06:04:56+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now let&rsquo;s take a step back and perform a word count with SQL</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163823_1076309938","id":"20160331-233830_1968421310","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:04:56+0000","dateFinished":"2017-02-18T06:04:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:435"},{"title":"Convert RDD to a DataFrame and Register a New Temp Table","text":"%spark2.pyspark\n\n# Convert wordsFiltered RDD to a Data Frame\nwords = wordsFiltered.map(lambda w: Row(word=w, count=1)).toDF()","user":"admin","dateUpdated":"2017-02-18T06:05:00+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"editorHide":false,"title":true,"results":[],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1487397163823_1076309938","id":"20160331-233830_1271375135","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:05:01+0000","dateFinished":"2017-02-18T06:05:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:436"},{"title":"Use DataFrame Specific Functions to Determine Word Counts","text":"%spark2.pyspark\n\n(words.groupBy(\"word\")\n        .sum()\n        .orderBy(\"sum(count)\", ascending=0)\n        .limit(10).show())","user":"admin","dateUpdated":"2017-02-18T06:05:08+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+----------+\n|word|sum(count)|\n+----+----------+\n| the|       110|\n|  of|        94|\n| and|        89|\n|  to|        84|\n|  is|        62|\n|   a|        60|\n|NiFi|        41|\n|  as|        32|\n| The|        28|\n|  be|        26|\n+----+----------+\n\n"}]},"apps":[],"jobName":"paragraph_1487397163823_1076309938","id":"20160331-233830_539606295","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:05:08+0000","dateFinished":"2017-02-18T06:05:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:437"},{"title":"Register as Temporary View","text":"%spark2.pyspark\n\n# Create a Temporary View\nwords.createOrReplaceTempView(\"words\")","user":"admin","dateUpdated":"2017-02-18T06:05:39+0000","config":{"editorMode":"ace/mode/python","colWidth":12,"title":true,"results":[],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1487397163823_1076309938","id":"20160331-233830_339558784","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:05:39+0000","dateFinished":"2017-02-18T06:05:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:438"},{"title":"Word Count using SQL","text":"%md\n\nNow let's do a word count using a SQL statement against the `words` table and order the results in a descending order by count.","user":"admin","dateUpdated":"2017-02-18T06:05:42+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now let&rsquo;s do a word count using a SQL statement against the <code>words</code> table and order the results in a descending order by count.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163824_1086698158","id":"20160331-233830_1100432609","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:05:42+0000","dateFinished":"2017-02-18T06:05:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:439"},{"text":"%spark2.sql\n\nSELECT word, count(*) as count FROM words GROUP BY word ORDER BY count DESC LIMIT 10","user":"admin","dateUpdated":"2017-02-18T06:05:49+0000","config":{"tableHide":false,"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"results":[{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"word","index":0,"aggr":"sum"}],"values":[{"name":"count","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"word","index":0,"aggr":"sum"},"yAxis":{"name":"count","index":1,"aggr":"sum"}}}}],"enabled":true,"editorSetting":{"editOnDblClick":false,"language":"sql"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"word\tcount\nthe\t110\nof\t94\nand\t89\nto\t84\nis\t62\na\t60\nNiFi\t41\nas\t32\nThe\t28\nbe\t26\n"}]},"apps":[],"jobName":"paragraph_1487397163824_1086698158","id":"20160331-233830_841691499","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:05:49+0000","dateFinished":"2017-02-18T06:05:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:440"},{"title":"The End","text":"%md\nYou've reached the end of this lab! We hope you've been able to successfully complete all the sections and learned a thing or two about Apache Spark: low-level RDD transformations and actions as well as higher-level DataFrame and SQL APIs.","user":"admin","dateUpdated":"2017-02-18T06:05:55+0000","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>You&rsquo;ve reached the end of this lab! We hope you&rsquo;ve been able to successfully complete all the sections and learned a thing or two about Apache Spark: low-level RDD transformations and actions as well as higher-level DataFrame and SQL APIs.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163824_1086698158","id":"20160331-233830_293992216","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:05:55+0000","dateFinished":"2017-02-18T06:05:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:441"},{"title":"Additional Resources","text":"%md\n\nWe hope you've enjoyed this brief intro to Apache Spark. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type=question) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hortonworks Apache Spark Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html) - official Spark documentation.\n4. [Hortonworks Apache Zeppelin Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html) - official Zeppelin documentation.\n","user":"admin","dateUpdated":"2017-02-18T06:06:09+0000","config":{"tableHide":false,"editorMode":"ace/mode/markdown","colWidth":10,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true,"language":"markdown"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We hope you&rsquo;ve enjoyed this brief intro to Apache Spark. Below are additional resources that you should find useful:</p>\n<ol>\n  <li><a href=\"http://hortonworks.com/tutorials/#tuts-developers\">Hortonworks Apache Spark Tutorials</a> are your natural next step where you can explore Spark in more depth.</li>\n  <li><a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\">Hortonworks Community Connection (HCC)</a> is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.</li>\n  <li><a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html\">Hortonworks Apache Spark Docs</a> - official Spark documentation.</li>\n  <li><a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html\">Hortonworks Apache Zeppelin Docs</a> - official Zeppelin documentation.</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1487397163824_1086698158","id":"20160331-233830_1914786212","dateCreated":"2017-02-18T05:52:43+0000","dateStarted":"2017-02-18T06:06:09+0000","dateFinished":"2017-02-18T06:06:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:442"},{"text":"%angular\n</br>\n<center>\n<a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\" target='_blank'>\n  <img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" style=\"width:125px;height:125px;border:0;\" align=\"middle\">\n</a>\n</center>","dateUpdated":"2017-02-18T05:52:43+0000","config":{"editorMode":"ace/mode/scala","colWidth":2,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"</br>\n<center>\n<a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\" target='_blank'>\n  <img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" style=\"width:125px;height:125px;border:0;\" align=\"middle\">\n</a>\n</center>"}]},"apps":[],"jobName":"paragraph_1487397163824_1086698158","id":"20160331-233830_200815067","dateCreated":"2017-02-18T05:52:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:443"},{"text":"","dateUpdated":"2017-02-18T05:52:43+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"editOnDblClick":false,"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487397163824_1086698158","id":"20161018-144007_1720066531","dateCreated":"2017-02-18T05:52:43+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:444"}],"name":"Labs / Spark 2.x / Data Worker / Python / 101 - Intro to Spark","id":"2CAX5JCTA","angularObjects":{"2C8KBC98A:shared_process":[],"2C8GUTGCE:shared_process":[],"2CBQPWEAP:shared_process":[],"2CATVSY4P:shared_process":[],"2CC55453H:shared_process":[],"2CA97ZN5K:shared_process":[],"2C4U48MY3_spark2:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}