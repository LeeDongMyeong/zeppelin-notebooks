{"paragraphs":[{"text":"%md\n\n## Exploring Spark SQL Module\n#### with an Airline Dataset\n\n**Level**: Beginner\n**Language**: Scala\n**Requirements**: \n- [HDP 2.5](http://hortonworks.com/products/sandbox/) (or later) or [HDCloud](https://hortonworks.github.io/hdp-aws/)\n- Spark 2.x\n\n**Author**: Robert Hryniewicz\n**Follow** [@RobH8z](https://twitter.com/RobH8z)","dateUpdated":"2016-10-20T10:41:54+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071481_744179133","id":"20160410-003138_1880368561","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Exploring Spark SQL Module</h2>\n<h4>with an Airline Dataset</h4>\n<p><strong>Level</strong>: Beginner\n<br  /><strong>Language</strong>: Scala\n<br  /><strong>Requirements</strong>:</p>\n<ul>\n<li><a href=\"http://hortonworks.com/products/sandbox/\">HDP 2.5</a> (or later) or <a href=\"https://hortonworks.github.io/hdp-aws/\">HDCloud</a></li>\n<li>Spark 2.x</li>\n</ul>\n<p><strong>Author</strong>: Robert Hryniewicz\n<br  /><strong>Follow</strong> <a href=\"https://twitter.com/RobH8z\">@RobH8z</a></p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-20T10:41:53+0200","dateFinished":"2016-10-20T10:41:53+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:313"},{"title":"Introduction","text":"%md\n\nIn this lab you will use Spark SQL via DataFrames API in Part 1 of the lab and SQL API in Part 2 of the lab to explore an Airline Dataset. This is a very interesting dataset that is further explored in other demo notebooks.","dateUpdated":"2016-10-14T02:51:45+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":217,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071481_744179133","id":"20160410-003138_985055475","result":{"code":"SUCCESS","type":"HTML","msg":"<p>In this lab you will use Spark SQL via DataFrames API in Part 1 of the lab and SQL API in Part 2 of the lab to explore an Airline Dataset. This is a very interesting dataset that is further explored in other demo notebooks.</p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-14T02:51:44+0200","dateFinished":"2016-10-14T02:51:44+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:314"},{"title":"Datasets? DataFrames?","text":"%md\n\nA **Dataset** is a distributed collection of data. Dataset provides the benefits of strong typing, ability to use powerful lambda functions with the benefits of (Spark SQL’s) optimized execution engine. A Dataset can be constructed from JVM objects and then manipulated using functional transformations (map, flatMap, filter, etc.). The Dataset API is available in Scala and Java.\n\nA **DataFrame** is a Dataset organized into named columns. It is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood. DataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs. The DataFrame API is available in Scala, Java, Python, and R. In Scala and Java, a DataFrame is represented by a Dataset of Rows. In the Scala API, DataFrame is simply a type alias of Dataset[Row]. (Note that in Scala type parameters (generics) are enclosed in square brackets.)\n\nThroughout this document, we will often refer to Scala/Java Datasets of Rows as DataFrames. [[source](http://spark.apache.org/docs/2.0.0/sql-programming-guide.html#datasets-and-dataframes)]","dateUpdated":"2016-11-02T09:23:48+0100","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071481_744179133","id":"20160410-003138_875933602","result":{"code":"SUCCESS","type":"HTML","msg":"<p>A <strong>Dataset</strong> is a distributed collection of data. Dataset provides the benefits of strong typing, ability to use powerful lambda functions with the benefits of (Spark SQL’s) optimized execution engine. A Dataset can be constructed from JVM objects and then manipulated using functional transformations (map, flatMap, filter, etc.). The Dataset API is available in Scala and Java.</p>\n<p>A <strong>DataFrame</strong> is a Dataset organized into named columns. It is conceptually equivalent to a table in a relational database or a data frame in R/Python, but with richer optimizations under the hood. DataFrames can be constructed from a wide array of sources such as: structured data files, tables in Hive, external databases, or existing RDDs. The DataFrame API is available in Scala, Java, Python, and R. In Scala and Java, a DataFrame is represented by a Dataset of Rows. In the Scala API, DataFrame is simply a type alias of Dataset[Row]. (Note that in Scala type parameters (generics) are enclosed in square brackets.)</p>\n<p>Throughout this document, we will often refer to Scala/Java Datasets of Rows as DataFrames. [<a href=\"http://spark.apache.org/docs/2.0.0/sql-programming-guide.html#datasets-and-dataframes\">source</a>]</p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:23:47+0100","dateFinished":"2016-11-02T09:23:47+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:315"},{"title":"New to Scala?","text":"%md\n\nThroughout this lab we will use basic Scala syntax. If you would like to learn more about Scala, here's an excellent introductory [Tutorial](http://www.dhgarrette.com/nlpclass/scala/basics.html).","dateUpdated":"2016-10-14T02:55:00+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071481_744179133","id":"20160410-140356_736870357","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Throughout this lab we will use basic Scala syntax. If you would like to learn more about Scala, here's an excellent introductory <a href=\"http://www.dhgarrette.com/nlpclass/scala/basics.html\">Tutorial</a>.</p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-14T02:54:59+0200","dateFinished":"2016-10-14T02:54:59+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:316"},{"title":"How to run a paragraph","text":"%md\nTo run a paragraph in a Zeppelin notebook you can either click the `play` button (blue triangle) on the right-hand side or simply press `Shift + Enter`.","dateUpdated":"2016-10-14T02:42:21+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071481_744179133","id":"20160410-003138_1218388802","result":{"code":"SUCCESS","type":"HTML","msg":"<p>To run a paragraph in a Zeppelin notebook you can either click the <code>play</code> button (blue triangle) on the right-hand side or simply press <code>Shift + Enter</code>.</p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:317"},{"title":"What are Interpreters?","text":"%md\n\nIn the following paragraphs we are going to execute Spark code, run shell commands to download and move files, run sql queries etc. Each paragraph will start with `%` followed by an interpreter name, e.g. `%spark` for a Spark interpreter. Different interpreter names indicate what will be executed: code, markdown, html etc.  This allows you to perform data ingestion, munging, wrangling, visualization, analysis, processing and more, all in one place!\n\nThroughtout this notebook we will use the following interpreters:\n\n- `%spark` - Spark interpreter to run Spark code written in Scala\n- `%sql` - Spark SQL interprter (to execute SQL queries against temporary tables in Spark)\n- `%sh` - Shell interpreter to run shell commands\n- `%angular` - Angular interpreter to run Angular and HTML code\n- `%md` - Markdown for displaying formatted text, links, and images\n\nNote: The **default interpreter**, if none is specified, is the `%spark` interpreter.\n\nTo learn more about Zeppelin interpreters check out this [link](https://zeppelin.apache.org/docs/0.5.6-incubating/manual/interpreters.html).","dateUpdated":"2016-10-18T02:13:23+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_290903368","result":{"code":"SUCCESS","type":"HTML","msg":"<p>In the following paragraphs we are going to execute Spark code, run shell commands to download and move files, run sql queries etc. Each paragraph will start with <code>%</code> followed by an interpreter name, e.g. <code>%spark</code> for a Spark interpreter. Different interpreter names indicate what will be executed: code, markdown, html etc.  This allows you to perform data ingestion, munging, wrangling, visualization, analysis, processing and more, all in one place!</p>\n<p>Throughtout this notebook we will use the following interpreters:</p>\n<ul>\n<li><code>%spark</code> - Spark interpreter to run Spark code written in Scala</li>\n<li><code>%sql</code> - Spark SQL interprter (to execute SQL queries against temporary tables in Spark)</li>\n<li><code>%sh</code> - Shell interpreter to run shell commands</li>\n<li><code>%angular</code> - Angular interpreter to run Angular and HTML code</li>\n<li><code>%md</code> - Markdown for displaying formatted text, links, and images</li>\n</ul>\n<p>Note: The <strong>default interpreter</strong>, if none is specified, is the <code>%spark</code> interpreter.</p>\n<p>To learn more about Zeppelin interpreters check out this <a href=\"https://zeppelin.apache.org/docs/0.5.6-incubating/manual/interpreters.html\">link</a>.</p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-18T01:52:47+0200","dateFinished":"2016-10-18T01:52:47+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:318"},{"title":"Some initial delay to be expected...","text":"%md\n**Note**: The first time you run `spark.version` in the paragraph below, several services will initialize in the background. \nThis may take **1~2 min** so please **be patient**. Afterwards, each paragraph should run much more quickly since all the services will already be running.","dateUpdated":"2016-10-23T08:23:07+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_243701002","result":{"code":"SUCCESS","type":"HTML","msg":"<p><strong>Note</strong>: The first time you run <code>spark.version</code> in the paragraph below, several services will initialize in the background.\n<br  />This may take <strong>1~2 min</strong> so please <strong>be patient</strong>. Afterwards, each paragraph should run much more quickly since all the services will already be running.</p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-14T02:40:08+0200","dateFinished":"2016-10-14T02:40:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:319"},{"title":"Verify Spark Version (should be 2.x)","text":"%spark\n\nspark.version","dateUpdated":"2016-11-02T09:23:54+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_631425785","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres50: String = 2.0.0\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:23:54+0100","dateFinished":"2016-11-02T09:23:54+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:320"},{"title":"Download CSV flight data file ","text":"%sh\n\n# You will now download a subset of 2008 flights (only 100k lines)\n# The full dataset may be found here: http://stat-computing.org/dataexpo/2009/the-data.html\n\nwget https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv -O /tmp/flights.csv\necho \"Downloaded!\"","dateUpdated":"2016-11-02T09:23:57+0100","config":{"tableHide":false,"editorMode":"ace/mode/sh","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_1540125404","result":{"code":"SUCCESS","type":"TEXT","msg":"--2016-11-02 21:23:57--  https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.52.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.52.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 9719582 (9,3M) [text/plain]\nSaving to: ‘/tmp/flights.csv’\n\n     0K .......... .......... .......... .......... ..........  0%  439K 22s\n    50K .......... .......... .......... .......... ..........  1%  758K 17s\n   100K .......... .......... .......... .......... ..........  1% 84,7K 48s\n   150K .......... .......... .......... .......... ..........  2% 42,8K 90s\n   200K .......... .......... .......... .......... ..........  2%  272K 78s\n   250K .......... .......... .......... .......... ..........  3%  487K 68s\n   300K .......... .......... .......... .......... ..........  3%  785K 60s\n   350K .......... .......... .......... .......... ..........  4%  236K 57s\n   400K .......... .......... .......... .......... ..........  4%  290K 54s\n   450K .......... .......... .......... .......... ..........  5%  270K 51s\n   500K .......... .......... .......... .......... ..........  5%  768K 48s\n   550K .......... .......... .......... .......... ..........  6%  540K 45s\n   600K .......... .......... .......... .......... ..........  6%  424K 43s\n   650K .......... .......... .......... .......... ..........  7%  891K 40s\n   700K .......... .......... .......... .......... ..........  7%  216K 40s\n   750K .......... .......... .......... .......... ..........  8%  330K 39s\n   800K .......... .......... .......... .......... ..........  8%  592K 37s\n   850K .......... .......... .......... .......... ..........  9%  613K 36s\n   900K .......... .......... .......... .......... .......... 10%  973K 34s\n   950K .......... .......... .......... .......... .......... 10% 1,45M 32s\n  1000K .......... .......... .......... .......... .......... 11%  813K 31s\n  1050K .......... .......... .......... .......... .......... 11%  935K 30s\n  1100K .......... .......... .......... .......... .......... 12%  763K 29s\n  1150K .......... .......... .......... .......... .......... 12%  275K 29s\n  1200K .......... .......... .......... .......... .......... 13% 1,56M 28s\n  1250K .......... .......... .......... .......... .......... 13%  525K 27s\n  1300K .......... .......... .......... .......... .......... 14%  880K 26s\n  1350K .......... .......... .......... .......... .......... 14% 1,12M 25s\n  1400K .......... .......... .......... .......... .......... 15%  761K 25s\n  1450K .......... .......... .......... .......... .......... 15% 1,80M 24s\n  1500K .......... .......... .......... .......... .......... 16%  996K 23s\n  1550K .......... .......... .......... .......... .......... 16%  590K 23s\n  1600K .......... .......... .......... .......... .......... 17% 1,28M 22s\n  1650K .......... .......... .......... .......... .......... 17%  798K 22s\n  1700K .......... .......... .......... .......... .......... 18%  982K 21s\n  1750K .......... .......... .......... .......... .......... 18% 1,69M 21s\n  1800K .......... .......... .......... .......... .......... 19%  814K 20s\n  1850K .......... .......... .......... .......... .......... 20% 1,60M 20s\n  1900K .......... .......... .......... .......... .......... 20%  768K 19s\n  1950K .......... .......... .......... .......... .......... 21%  647K 19s\n  2000K .......... .......... .......... .......... .......... 21%  934K 19s\n  2050K .......... .......... .......... .......... .......... 22%  796K 18s\n  2100K .......... .......... .......... .......... .......... 22%  523K 18s\n  2150K .......... .......... .......... .......... .......... 23%  368K 18s\n  2200K .......... .......... .......... .......... .......... 23% 2,58M 17s\n  2250K .......... .......... .......... .......... .......... 24%  335K 17s\n  2300K .......... .......... .......... .......... .......... 24%  646K 17s\n  2350K .......... .......... .......... .......... .......... 25%  278K 17s\n  2400K .......... .......... .......... .......... .......... 25% 4,33M 17s\n  2450K .......... .......... .......... .......... .......... 26%  288K 17s\n  2500K .......... .......... .......... .......... .......... 26%  397K 17s\n  2550K .......... .......... .......... .......... .......... 27%  792K 16s\n  2600K .......... .......... .......... .......... .......... 27%  462K 16s\n  2650K .......... .......... .......... .......... .......... 28%  423K 16s\n  2700K .......... .......... .......... .......... .......... 28%  572K 16s\n  2750K .......... .......... .......... .......... .......... 29%  702K 16s\n  2800K .......... .......... .......... .......... .......... 30%  994K 15s\n  2850K .......... .......... .......... .......... .......... 30%  501K 15s\n  2900K .......... .......... .......... .......... .......... 31% 1,10M 15s\n  2950K .......... .......... .......... .......... .......... 31%  605K 15s\n  3000K .......... .......... .......... .......... .......... 32% 1,03M 15s\n  3050K .......... .......... .......... .......... .......... 32% 1,13M 14s\n  3100K .......... .......... .......... .......... .......... 33%  724K 14s\n  3150K .......... .......... .......... .......... .......... 33%  489K 14s\n  3200K .......... .......... .......... .......... .......... 34% 2,54M 14s\n  3250K .......... .......... .......... .......... .......... 34%  299K 14s\n  3300K .......... .......... .......... .......... .......... 35%  476K 14s\n  3350K .......... .......... .......... .......... .......... 35%  444K 13s\n  3400K .......... .......... .......... .......... .......... 36%  563K 13s\n  3450K .......... .......... .......... .......... .......... 36% 1,14M 13s\n  3500K .......... .......... .......... .......... .......... 37% 1,86M 13s\n  3550K .......... .......... .......... .......... .......... 37%  742K 13s\n  3600K .......... .......... .......... .......... .......... 38% 1,67M 12s\n  3650K .......... .......... .......... .......... .......... 38%  392K 12s\n  3700K .......... .......... .......... .......... .......... 39%  757K 12s\n  3750K .......... .......... .......... .......... .......... 40%  652K 12s\n  3800K .......... .......... .......... .......... .......... 40%  115K 12s\n  3850K .......... .......... .......... .......... .......... 41% 40,8M 12s\n  3900K .......... .......... .......... .......... .......... 41%  544K 12s\n  3950K .......... .......... .......... .......... .......... 42%  600K 12s\n  4000K .......... .......... .......... .......... .......... 42%  772K 12s\n  4050K .......... .......... .......... .......... .......... 43%  630K 12s\n  4100K .......... .......... .......... .......... .......... 43%  995K 11s\n  4150K .......... .......... .......... .......... .......... 44%  538K 11s\n  4200K .......... .......... .......... .......... .......... 44% 1,47M 11s\n  4250K .......... .......... .......... .......... .......... 45%  603K 11s\n  4300K .......... .......... .......... .......... .......... 45% 2,20M 11s\n  4350K .......... .......... .......... .......... .......... 46%  978K 11s\n  4400K .......... .......... .......... .......... .......... 46% 2,12M 10s\n  4450K .......... .......... .......... .......... .......... 47%  534K 10s\n  4500K .......... .......... .......... .......... .......... 47% 1,14M 10s\n  4550K .......... .......... .......... .......... .......... 48% 1,65M 10s\n  4600K .......... .......... .......... .......... .......... 48%  370K 10s\n  4650K .......... .......... .......... .......... .......... 49% 1,70M 10s\n  4700K .......... .......... .......... .......... .......... 50%  482K 10s\n  4750K .......... .......... .......... .......... .......... 50% 9,77M 9s\n  4800K .......... .......... .......... .......... .......... 51% 1,61M 9s\n  4850K .......... .......... .......... .......... .......... 51%  488K 9s\n  4900K .......... .......... .......... .......... .......... 52%  765K 9s\n  4950K .......... .......... .......... .......... .......... 52%  313K 9s\n  5000K .......... .......... .......... .......... .......... 53% 1,19M 9s\n  5050K .......... .......... .......... .......... .......... 53%  462K 9s\n  5100K .......... .......... .......... .......... .......... 54%  816K 9s\n  5150K .......... .......... .......... .......... .......... 54%  744K 8s\n  5200K .......... .......... .......... .......... .......... 55%  753K 8s\n  5250K .......... .......... .......... .......... .......... 55% 1,11M 8s\n  5300K .......... .......... .......... .......... .......... 56%  421K 8s\n  5350K .......... .......... .......... .......... .......... 56%  682K 8s\n  5400K .......... .......... .......... .......... .......... 57% 2,42M 8s\n  5450K .......... .......... .......... .......... .......... 57% 1,03M 8s\n  5500K .......... .......... .......... .......... .......... 58% 1,19M 8s\n  5550K .......... .......... .......... .......... .......... 58%  573K 7s\n  5600K .......... .......... .......... .......... .......... 59% 21,0M 7s\n  5650K .......... .......... .......... .......... .......... 60%  872K 7s\n  5700K .......... .......... .......... .......... .......... 60%  735K 7s\n  5750K .......... .......... .......... .......... .......... 61%  914K 7s\n  5800K .......... .......... .......... .......... .......... 61% 1,64M 7s\n  5850K .......... .......... .......... .......... .......... 62%  621K 7s\n  5900K .......... .......... .......... .......... .......... 62% 1,50M 7s\n  5950K .......... .......... .......... .......... .......... 63%  564K 6s\n  6000K .......... .......... .......... .......... .......... 63% 3,15M 6s\n  6050K .......... .......... .......... .......... .......... 64%  545K 6s\n  6100K .......... .......... .......... .......... .......... 64% 1,26M 6s\n  6150K .......... .......... .......... .......... .......... 65%  553K 6s\n  6200K .......... .......... .......... .......... .......... 65% 3,17M 6s\n  6250K .......... .......... .......... .......... .......... 66%  671K 6s\n  6300K .......... .......... .......... .......... .......... 66% 1,16M 6s\n  6350K .......... .......... .......... .......... .......... 67% 1,36M 6s\n  6400K .......... .......... .......... .......... .......... 67%  729K 5s\n  6450K .......... .......... .......... .......... .......... 68% 1,89M 5s\n  6500K .......... .......... .......... .......... .......... 69% 1,94M 5s\n  6550K .......... .......... .......... .......... .......... 69%  555K 5s\n  6600K .......... .......... .......... .......... .......... 70%  858K 5s\n  6650K .......... .......... .......... .......... .......... 70% 1,05M 5s\n  6700K .......... .......... .......... .......... .......... 71%  662K 5s\n  6750K .......... .......... .......... .......... .......... 71%  481K 5s\n  6800K .......... .......... .......... .......... .......... 72% 4,01M 5s\n  6850K .......... .......... .......... .......... .......... 72%  582K 5s\n  6900K .......... .......... .......... .......... .......... 73%  217K 5s\n  6950K .......... .......... .......... .......... .......... 73%  956K 4s\n  7000K .......... .......... .......... .......... .......... 74% 1,07M 4s\n  7050K .......... .......... .......... .......... .......... 74%  260K 4s\n  7100K .......... .......... .......... .......... .......... 75%  503K 4s\n  7150K .......... .......... .......... .......... .......... 75%  645K 4s\n  7200K .......... .......... .......... .......... .......... 76%  533K 4s\n  7250K .......... .......... .......... .......... .......... 76% 1,35M 4s\n  7300K .......... .......... .......... .......... .......... 77%  211K 4s\n  7350K .......... .......... .......... .......... .......... 77%  713K 4s\n  7400K .......... .......... .......... .......... .......... 78%  538K 4s\n  7450K .......... .......... .......... .......... .......... 79%  571K 4s\n  7500K .......... .......... .......... .......... .......... 79%  725K 3s\n  7550K .......... .......... .......... .......... .......... 80%  983K 3s\n  7600K .......... .......... .......... .......... .......... 80%  669K 3s\n  7650K .......... .......... .......... .......... .......... 81% 1,34M 3s\n  7700K .......... .......... .......... .......... .......... 81%  588K 3s\n  7750K .......... .......... .......... .......... .......... 82% 1,02M 3s\n  7800K .......... .......... .......... .......... .......... 82% 1,53M 3s\n  7850K .......... .......... .......... .......... .......... 83%  724K 3s\n  7900K .......... .......... .......... .......... .......... 83% 2,89M 3s\n  7950K .......... .......... .......... .......... .......... 84% 1,76M 3s\n  8000K .......... .......... .......... .......... .......... 84% 1,41M 3s\n  8050K .......... .......... .......... .......... .......... 85% 5,43M 2s\n  8100K .......... .......... .......... .......... .......... 85% 5,80M 2s\n  8150K .......... .......... .......... .......... .......... 86%  614K 2s\n  8200K .......... .......... .......... .......... .......... 86% 2,63M 2s\n  8250K .......... .......... .......... .......... .......... 87% 1,18M 2s\n  8300K .......... .......... .......... .......... .......... 87% 1,88M 2s\n  8350K .......... .......... .......... .......... .......... 88%  479K 2s\n  8400K .......... .......... .......... .......... .......... 89% 1,80M 2s\n  8450K .......... .......... .......... .......... .......... 89% 2,21M 2s\n  8500K .......... .......... .......... .......... .......... 90% 1,77M 2s\n  8550K .......... .......... .......... .......... .......... 90%  730K 1s\n  8600K .......... .......... .......... .......... .......... 91%  831K 1s\n  8650K .......... .......... .......... .......... .......... 91%  865K 1s\n  8700K .......... .......... .......... .......... .......... 92%  883K 1s\n  8750K .......... .......... .......... .......... .......... 92% 2,82M 1s\n  8800K .......... .......... .......... .......... .......... 93%  459K 1s\n  8850K .......... .......... .......... .......... .......... 93%  647K 1s\n  8900K .......... .......... .......... .......... .......... 94%  923K 1s\n  8950K .......... .......... .......... .......... .......... 94%  487K 1s\n  9000K .......... .......... .......... .......... .......... 95% 1,38M 1s\n  9050K .......... .......... .......... .......... .......... 95%  385K 1s\n  9100K .......... .......... .......... .......... .......... 96% 1015K 1s\n  9150K .......... .......... .......... .......... .......... 96%  713K 0s\n  9200K .......... .......... .......... .......... .......... 97%  511K 0s\n  9250K .......... .......... .......... .......... .......... 97%  739K 0s\n  9300K .......... .......... .......... .......... .......... 98% 3,01M 0s\n  9350K .......... .......... .......... .......... .......... 99%  506K 0s\n  9400K .......... .......... .......... .......... .......... 99%  768K 0s\n  9450K .......... .......... .......... .......... .         100%  991K=16s\n\n2016-11-02 21:24:13 (606 KB/s) - ‘/tmp/flights.csv’ saved [9719582/9719582]\n\nDownloaded!\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:23:57+0100","dateFinished":"2016-11-02T09:24:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:321"},{"title":"Move Datasets to HDFS","text":"%sh\n\n# TODO: Verify after deployed to HDP Sandbox\n\n# remove existing copies of dataset from HDFS\nhadoop fs -rm -r -f /tmp/airflightsdelays\n\n# create directory on HDFS\nhadoop fs -mkdir /tmp/airflightsdelays\n\n# put data into HDFS\nhadoop fs -put /tmp/flights.csv /tmp/airflightsdelays/","dateUpdated":"2016-11-02T09:25:23+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_1267267737","result":{"code":"ERROR","type":"TEXT","msg":"bash: line 1: hadoop: command not found\nbash: line 4: hadoop: command not found\nbash: line 7: hadoop: command not found\nbash: line 1: hadoop: command not found\nbash: line 4: hadoop: command not found\nbash: line 7: hadoop: command not found\nExitValue: 127"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:24:20+0100","dateFinished":"2016-11-02T09:24:20+0100","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:322"},{"title":"Preview Downloaded File","text":"%sh\n\n# TODO: Verify after deployed to HDP Sandbox\n\nhadoop fs -cat /tmp/airflightsdelays/flights.csv | head","dateUpdated":"2016-11-02T09:25:23+0100","config":{"tableHide":false,"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_226044813","result":{"code":"SUCCESS","type":"TEXT","msg":"bash: hadoop: command not found\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:24:41+0100","dateFinished":"2016-11-02T09:24:41+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:323"},{"title":"Create a DataFrame from CSV file","text":"%spark\n\n//TODO: Update to read from HDFS once deployed to HDP Sandbox\n\n// Note that Spark Context and Spark SQL Context are automatically initialized in Zeppelin so we will skip those steps\n//val sc: Spark Context\n//val sqlContext: SQL Context\n\n// Create a flights DataFrame from CSV file\nval flights = spark.read\n              .option(\"header\", \"true\")             // Use first line as header\n              .option(\"inferSchema\", \"true\")        // Infer schema\n              .csv(\"file:///tmp/flights.csv\")       // Read data\n\n              //.csv(\"/tmp/airflightsdelays/\")      // TODO: use with HDFS read\n","dateUpdated":"2016-11-02T22:24:18+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_236600548","result":{"code":"SUCCESS","type":"TEXT","msg":"\nflights: org.apache.spark.sql.DataFrame = [Year: int, Month: int ... 27 more fields]\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:24:18+0100","dateFinished":"2016-11-02T22:24:20+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:324","focus":true},{"title":"Print Schema","text":"%spark\n\n// Print the schema in a tree format\nflights.printSchema()","dateUpdated":"2016-11-02T22:24:23+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_1553179639","result":{"code":"SUCCESS","type":"TEXT","msg":"root\n |-- Year: integer (nullable = true)\n |-- Month: integer (nullable = true)\n |-- DayofMonth: integer (nullable = true)\n |-- DayOfWeek: integer (nullable = true)\n |-- DepTime: string (nullable = true)\n |-- CRSDepTime: integer (nullable = true)\n |-- ArrTime: string (nullable = true)\n |-- CRSArrTime: integer (nullable = true)\n |-- UniqueCarrier: string (nullable = true)\n |-- FlightNum: integer (nullable = true)\n |-- TailNum: string (nullable = true)\n |-- ActualElapsedTime: string (nullable = true)\n |-- CRSElapsedTime: integer (nullable = true)\n |-- AirTime: string (nullable = true)\n |-- ArrDelay: string (nullable = true)\n |-- DepDelay: string (nullable = true)\n |-- Origin: string (nullable = true)\n |-- Dest: string (nullable = true)\n |-- Distance: integer (nullable = true)\n |-- TaxiIn: string (nullable = true)\n |-- TaxiOut: string (nullable = true)\n |-- Cancelled: integer (nullable = true)\n |-- CancellationCode: string (nullable = true)\n |-- Diverted: integer (nullable = true)\n |-- CarrierDelay: string (nullable = true)\n |-- WeatherDelay: string (nullable = true)\n |-- NASDelay: string (nullable = true)\n |-- SecurityDelay: string (nullable = true)\n |-- LateAircraftDelay: string (nullable = true)\n\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:24:23+0100","dateFinished":"2016-11-02T22:24:24+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:325","focus":true},{"title":"Dataset Description","text":"%angular\n\n<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n    font-family: arial, sans-serif;\n    border-collapse: collapse;\n    width: 70%;\n}\n\ntd, th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n}\n\ntr:nth-child(even) {\n    background-color: #dddddd;\n}\n</style>\n</head>\n\n<table width=\"100%\">\n<tbody><tr>\n  <th></th>\n  <th>Name</th>\n  <th>Description</th>\n</tr>\n<tr>\n <td>1  </td><td> Year              </td><td>1987-2008</td>\n</tr><tr>\n <td>2  </td><td> Month             </td><td>1-12</td>\n</tr><tr>\n <td>3  </td><td> DayofMonth        </td><td>1-31</td>\n</tr><tr>\n <td>4  </td><td> DayOfWeek         </td><td>1 (Monday) - 7 (Sunday)</td>\n</tr><tr>\n <td>5  </td><td> DepTime           </td><td>actual departure time (local, hhmm)</td>\n</tr><tr>\n <td>6  </td><td> CRSDepTime        </td><td>scheduled departure time (local, hhmm)</td>\n</tr><tr>\n <td>7  </td><td> ArrTime           </td><td>actual arrival time (local, hhmm)</td>\n</tr><tr>\n <td>8  </td><td> CRSArrTime        </td><td>scheduled arrival time (local, hhmm)</td>\n</tr><tr>\n <td>9  </td><td> UniqueCarrier     </td><td><a href=\"supplemental-data.html\">unique carrier code</a></td>\n</tr><tr>\n <td>10 </td><td> FlightNum         </td><td>flight number</td>\n</tr><tr>\n <td>11 </td><td> TailNum           </td><td>plane tail number</td>\n</tr><tr>\n <td>12 </td><td> ActualElapsedTime </td><td>in minutes</td>\n</tr><tr>\n <td>13 </td><td> CRSElapsedTime    </td><td>in minutes</td>\n</tr><tr>\n <td>14 </td><td> AirTime           </td><td>in minutes</td>\n</tr><tr>\n <td>15 </td><td> ArrDelay          </td><td>arrival delay, in minutes</td>\n</tr><tr>\n <td>16 </td><td> DepDelay          </td><td>departure delay, in minutes</td>\n</tr><tr>\n <td>17 </td><td> Origin            </td><td>origin <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>18 </td><td> Dest              </td><td>destination <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>19 </td><td> Distance          </td><td>in miles</td>\n</tr><tr>\n <td>20 </td><td> TaxiIn            </td><td>taxi in time, in minutes</td>\n</tr><tr>\n <td>21 </td><td> TaxiOut           </td><td>taxi out time in minutes</td>\n</tr><tr>\n <td>22 </td><td> Cancelled           </td><td>was the flight cancelled?</td>\n</tr><tr>\n <td>23 </td><td> CancellationCode  </td><td>reason for cancellation (A = carrier, B = weather, C = NAS, D = security)</td>\n</tr><tr>\n <td>24 </td><td> Diverted          </td><td>1 = yes, 0 = no</td>\n</tr><tr>\n <td>25 </td><td> CarrierDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>26 </td><td> WeatherDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>27 </td><td> NASDelay          </td><td>in minutes</td>\n</tr><tr>\n <td>28 </td><td> SecurityDelay     </td><td>in minutes</td>\n</tr><tr>\n <td>29 </td><td> LateAircraftDelay </td><td>in minutes</td>\n</tr>\n</tbody></table>\n\n</body>\n</html>","dateUpdated":"2016-11-02T09:25:26+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":true,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_1626463388","result":{"code":"SUCCESS","type":"ANGULAR","msg":"<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n    font-family: arial, sans-serif;\n    border-collapse: collapse;\n    width: 70%;\n}\n\ntd, th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n}\n\ntr:nth-child(even) {\n    background-color: #dddddd;\n}\n</style>\n</head>\n\n<table width=\"100%\">\n<tbody><tr>\n  <th></th>\n  <th>Name</th>\n  <th>Description</th>\n</tr>\n<tr>\n <td>1  </td><td> Year              </td><td>1987-2008</td>\n</tr><tr>\n <td>2  </td><td> Month             </td><td>1-12</td>\n</tr><tr>\n <td>3  </td><td> DayofMonth        </td><td>1-31</td>\n</tr><tr>\n <td>4  </td><td> DayOfWeek         </td><td>1 (Monday) - 7 (Sunday)</td>\n</tr><tr>\n <td>5  </td><td> DepTime           </td><td>actual departure time (local, hhmm)</td>\n</tr><tr>\n <td>6  </td><td> CRSDepTime        </td><td>scheduled departure time (local, hhmm)</td>\n</tr><tr>\n <td>7  </td><td> ArrTime           </td><td>actual arrival time (local, hhmm)</td>\n</tr><tr>\n <td>8  </td><td> CRSArrTime        </td><td>scheduled arrival time (local, hhmm)</td>\n</tr><tr>\n <td>9  </td><td> UniqueCarrier     </td><td><a href=\"supplemental-data.html\">unique carrier code</a></td>\n</tr><tr>\n <td>10 </td><td> FlightNum         </td><td>flight number</td>\n</tr><tr>\n <td>11 </td><td> TailNum           </td><td>plane tail number</td>\n</tr><tr>\n <td>12 </td><td> ActualElapsedTime </td><td>in minutes</td>\n</tr><tr>\n <td>13 </td><td> CRSElapsedTime    </td><td>in minutes</td>\n</tr><tr>\n <td>14 </td><td> AirTime           </td><td>in minutes</td>\n</tr><tr>\n <td>15 </td><td> ArrDelay          </td><td>arrival delay, in minutes</td>\n</tr><tr>\n <td>16 </td><td> DepDelay          </td><td>departure delay, in minutes</td>\n</tr><tr>\n <td>17 </td><td> Origin            </td><td>origin <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>18 </td><td> Dest              </td><td>destination <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>19 </td><td> Distance          </td><td>in miles</td>\n</tr><tr>\n <td>20 </td><td> TaxiIn            </td><td>taxi in time, in minutes</td>\n</tr><tr>\n <td>21 </td><td> TaxiOut           </td><td>taxi out time in minutes</td>\n</tr><tr>\n <td>22 </td><td> Cancelled           </td><td>was the flight cancelled?</td>\n</tr><tr>\n <td>23 </td><td> CancellationCode  </td><td>reason for cancellation (A = carrier, B = weather, C = NAS, D = security)</td>\n</tr><tr>\n <td>24 </td><td> Diverted          </td><td>1 = yes, 0 = no</td>\n</tr><tr>\n <td>25 </td><td> CarrierDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>26 </td><td> WeatherDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>27 </td><td> NASDelay          </td><td>in minutes</td>\n</tr><tr>\n <td>28 </td><td> SecurityDelay     </td><td>in minutes</td>\n</tr><tr>\n <td>29 </td><td> LateAircraftDelay </td><td>in minutes</td>\n</tr>\n</tbody></table>\n\n</body>\n</html>"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:25:27+0100","dateFinished":"2016-11-02T09:25:27+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:326"},{"text":"%md\n### Part 1: Using DataFrame/Dataset API to Analyze the Airline Data\n\nNote: in this lab DataFrame and Dataset API calls will be indistinguishable. Internally, however, *flights* are represented as DataFrames and *delayedFlights* as Datasets in the examples below.","dateUpdated":"2016-10-17T08:25:36+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_650819453","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Part 1: Using DataFrame/Dataset API to Analyze the Airline Data</h3>\n<p>Note: in this lab DataFrame and Dataset API calls will be indistinguishable. Internally, however, <em>flights</em> are represented as DataFrames and <em>delayedFlights</em> as Datasets in the examples below.</p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-17T08:25:35+0200","dateFinished":"2016-10-17T08:25:35+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:327"},{"title":"Show a subset of columns","text":"%spark\n\n// Show a subset of columns with \"select\"\nflights.select(\"UniqueCarrier\", \"FlightNum\", \"DepDelay\", \"ArrDelay\", \"Distance\").show()","dateUpdated":"2016-11-02T22:24:29+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_1188332400","result":{"code":"SUCCESS","type":"TEXT","msg":"+-------------+---------+--------+--------+--------+\n|UniqueCarrier|FlightNum|DepDelay|ArrDelay|Distance|\n+-------------+---------+--------+--------+--------+\n|           WN|      335|       8|     -14|     810|\n|           WN|     3231|      19|       2|     810|\n|           WN|      448|       8|      14|     515|\n|           WN|     1746|      -4|      -6|     515|\n|           WN|     3920|      34|      34|     515|\n|           WN|      378|      25|      11|     688|\n|           WN|      509|      67|      57|    1591|\n|           WN|      535|      -1|     -18|    1591|\n|           WN|       11|       2|       2|     451|\n|           WN|      810|       0|     -16|     451|\n|           WN|      100|       6|       1|     828|\n|           WN|     1333|      94|      80|     828|\n|           WN|      829|      -4|       1|     162|\n|           WN|     1016|       0|      10|     162|\n|           WN|     1827|       2|      -4|     162|\n|           WN|     2272|       9|      11|     162|\n|           WN|      675|      27|      15|    1489|\n|           WN|     1144|       9|     -15|    1489|\n|           WN|        4|      28|      16|     838|\n|           WN|       54|      51|      37|     220|\n+-------------+---------+--------+--------+--------+\nonly showing top 20 rows\n\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:24:29+0100","dateFinished":"2016-11-02T22:24:30+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:328","focus":true},{"title":"Apply a filter to find flights delayed more than 15 min","text":"%spark\n\n// Create a Dataset containing flights with delayed departure by more than 15 min using \"filter\"\nval delayedFlights = flights\n                        .select(\"UniqueCarrier\", \"DepDelay\")\n                        .filter($\"DepDelay\" > 15)\n                        \ndelayedFlights.show()","dateUpdated":"2016-11-02T22:24:33+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_704729700","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndelayedFlights: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [UniqueCarrier: string, DepDelay: string]\n+-------------+--------+\n|UniqueCarrier|DepDelay|\n+-------------+--------+\n|           WN|      19|\n|           WN|      34|\n|           WN|      25|\n|           WN|      67|\n|           WN|      94|\n|           WN|      27|\n|           WN|      28|\n|           WN|      51|\n|           WN|      32|\n|           WN|      20|\n|           WN|      25|\n|           WN|      87|\n|           WN|      29|\n|           WN|      82|\n|           WN|      19|\n|           WN|      39|\n|           WN|      82|\n|           WN|      22|\n|           WN|      29|\n|           WN|      56|\n+-------------+--------+\nonly showing top 20 rows\n\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:24:33+0100","dateFinished":"2016-11-02T22:24:35+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:329","focus":true},{"title":"Display percentage of delayed flights","text":"%spark\n\nval numTotalFlights = flights.count()\nval numDelayedFlights = delayedFlights.count()\n\n// Print total number of delayed flights\nprintln(\"Percentage of Delayed Flights: \" + (numDelayedFlights.toFloat/numTotalFlights*100) + \"%\")\n\n","dateUpdated":"2016-11-02T22:24:37+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_1019754695","result":{"code":"SUCCESS","type":"TEXT","msg":"\nnumTotalFlights: Long = 100000\n\nnumDelayedFlights: Long = 19587\nPercentage of Delayed Flights: 19.587%\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:24:37+0100","dateFinished":"2016-11-02T22:24:40+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:330","focus":true},{"text":"%md\n\nWe can also create a user defined function (UDF) to determine delays.","dateUpdated":"2016-10-17T08:37:53+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476729395787_1376544316","id":"20161017-203635_1855560775","result":{"code":"SUCCESS","type":"HTML","msg":"<p>We can also create a user defined function (UDF) to determine delays.</p>\n"},"dateCreated":"2016-10-17T08:36:35+0200","dateStarted":"2016-10-17T08:37:49+0200","dateFinished":"2016-10-17T08:37:49+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:331"},{"title":" Create a UDF to determine delays","text":"%spark\n\nimport org.apache.spark.sql.functions.udf\n\n// Define a UDF to find delayed flights\n\n// Assume:\n//  if ArrDelay is not available then Delayed = False\n//  if ArrDelay > 15 min then Delayed = True else False\n\nval isDelayedUDF = udf((time: String) => if (time == \"NA\") 0 else if (time.toInt > 15) 1 else 0)","dateUpdated":"2016-11-02T22:24:41+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476729017895_1384855550","id":"20161017-203017_1781904338","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.sql.functions.udf\n\nisDelayedUDF: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\n"},"dateCreated":"2016-10-17T08:30:17+0200","dateStarted":"2016-11-02T22:24:41+0100","dateFinished":"2016-11-02T22:24:43+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:332","focus":true},{"title":"Create a new DataFrame with IsDelayed column","text":"val flightsWithDelays = flights.select($\"Year\", $\"Month\", $\"DayofMonth\", $\"UniqueCarrier\", $\"FlightNum\", $\"DepDelay\", \n                    isDelayedUDF($\"DepDelay\").alias(\"IsDelayed\"))\n                    \nflightsWithDelays.show(5)","dateUpdated":"2016-11-02T22:24:45+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476729238446_-606465195","id":"20161017-203358_1309594443","result":{"code":"SUCCESS","type":"TEXT","msg":"\nflightsWithDelays: org.apache.spark.sql.DataFrame = [Year: int, Month: int ... 5 more fields]\n+----+-----+----------+-------------+---------+--------+---------+\n|Year|Month|DayofMonth|UniqueCarrier|FlightNum|DepDelay|IsDelayed|\n+----+-----+----------+-------------+---------+--------+---------+\n|2008|    1|         3|           WN|      335|       8|        0|\n|2008|    1|         3|           WN|     3231|      19|        1|\n|2008|    1|         3|           WN|      448|       8|        0|\n|2008|    1|         3|           WN|     1746|      -4|        0|\n|2008|    1|         3|           WN|     3920|      34|        1|\n+----+-----+----------+-------------+---------+--------+---------+\nonly showing top 5 rows\n\n"},"dateCreated":"2016-10-17T08:33:58+0200","dateStarted":"2016-11-02T22:24:45+0100","dateFinished":"2016-11-02T22:24:46+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:333","focus":true},{"text":"%md\n\nNote that now we have a new table with a column that indicates whether a flight is delayed or not. This will allow us to calculate percentage of delayed flights in one pass.","dateUpdated":"2016-10-17T08:57:41+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476730612105_1553537785","id":"20161017-205652_1397194952","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Note that now we have a new table with a column that indicates whether a flight is delayed or not. This will allow us to calculate percentage of delayed flights in one pass.</p>\n"},"dateCreated":"2016-10-17T08:56:52+0200","dateStarted":"2016-10-17T08:57:38+0200","dateFinished":"2016-10-17T08:57:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:334"},{"title":"Calculate percentage of delayed flights using flightsWithDelays DataFrame","text":"flightsWithDelays.agg((sum(\"IsDelayed\") * 100 / count(\"DepDelay\")).alias(\"Percentage of Delayed Flights\")).show()","dateUpdated":"2016-11-02T22:24:50+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476730670596_-881260524","id":"20161017-205750_819957102","result":{"code":"SUCCESS","type":"TEXT","msg":"+-----------------------------+\n|Percentage of Delayed Flights|\n+-----------------------------+\n|                       19.587|\n+-----------------------------+\n\n"},"dateCreated":"2016-10-17T08:57:50+0200","dateStarted":"2016-11-02T22:24:50+0100","dateFinished":"2016-11-02T22:24:52+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:335","focus":true},{"text":"%md\n\nAs you can see above, this is a very clean way of displaying a percentage of delayed flights. UDFs are useful in creating additional functions that are commonly used.\n\nNow let's explore our flights a bit more and find some averages.","dateUpdated":"2016-10-17T09:00:59+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476730759389_1501644301","id":"20161017-205919_1405069576","result":{"code":"SUCCESS","type":"HTML","msg":"<p>As you can see above, this is a very clean way of displaying a percentage of delayed flights. UDFs are useful in creating additional functions that are commonly used.</p>\n<p>Now let's explore our flights a bit more and find some averages.</p>\n"},"dateCreated":"2016-10-17T08:59:19+0200","dateStarted":"2016-10-17T09:00:58+0200","dateFinished":"2016-10-17T09:00:58+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:336"},{"title":"Find Avg Taxi-in","text":"flights.select(\"Origin\", \"Dest\", \"TaxiIn\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiIn\")\n        .alias(\"AvgTaxiIn\"))\n        .orderBy(desc(\"AvgTaxiIn\"))\n        .show(10)","dateUpdated":"2016-11-02T09:27:39+0100","config":{"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_1488719873","result":{"code":"SUCCESS","type":"TEXT","msg":"+------+----+------------------+\n|Origin|Dest|         AvgTaxiIn|\n+------+----+------------------+\n|   CLT| IAH|              22.0|\n|   IAH| ABQ|              18.0|\n|   MCI| IAH|14.666666666666666|\n|   BHM| EWR|              13.0|\n|   SMF| GEG|12.462962962962964|\n|   CRW| IAH|              12.0|\n|   MHT| CLE|              12.0|\n|   IAH| JAX|              11.0|\n|   ONT| COS|10.903225806451612|\n|   SMF| COS|10.610169491525424|\n+------+----+------------------+\nonly showing top 10 rows\n\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:27:39+0100","dateFinished":"2016-11-02T09:27:42+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:337"},{"title":"Find Avg Taxi-out","text":"flights.select(\"Origin\", \"Dest\", \"TaxiOut\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiOut\")\n        .alias(\"AvgTaxiOut\"))\n        .orderBy(desc(\"AvgTaxiOut\"))\n        .show(10)","dateUpdated":"2016-11-02T09:27:44+0100","config":{"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_840324935","result":{"code":"SUCCESS","type":"TEXT","msg":"+------+----+----------+\n|Origin|Dest|AvgTaxiOut|\n+------+----+----------+\n|   LCH| IAH|      84.0|\n|   EWR| BHM|      63.0|\n|   EWR| SDF|      45.0|\n|   EWR| GSO|      36.5|\n|   MHT| CLE|      33.0|\n|   EWR| JAX|      28.0|\n|   EWR| DTW|      27.0|\n|   CLE| SDF|      27.0|\n|   ORD| EWR|      26.0|\n|   EWR| MCI|      26.0|\n+------+----+----------+\nonly showing top 10 rows\n\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:27:44+0100","dateFinished":"2016-11-02T09:27:47+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:338"},{"text":"%md\n### Part 2: Using SQL API to Analyze the Airline Data","dateUpdated":"2016-10-17T08:19:57+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_582934314","result":{"code":"SUCCESS","type":"HTML","msg":"<h3>Part 2: Using SQL API to Analyze the Airline Data</h3>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-17T08:19:57+0200","dateFinished":"2016-10-17T08:19:57+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:339"},{"title":"Is there a more interactive way to display query results?","text":"%md\n\nAs you can see, the data displayed in Part 1 of this notebook isn't too interactive. To have a more dynamic experience, let's create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to execute SQL queries against it.\n\nNote that the temporary view will reside in memory as long as the Spark session is alive.","dateUpdated":"2016-10-17T10:02:19+0200","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_556617784","result":{"code":"SUCCESS","type":"HTML","msg":"<p>As you can see, the data displayed in Part 1 of this notebook isn't too interactive. To have a more dynamic experience, let's create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to execute SQL queries against it.</p>\n<p>Note that the temporary view will reside in memory as long as the Spark session is alive.</p>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-17T10:00:02+0200","dateFinished":"2016-10-17T10:00:02+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:340"},{"title":"Register a Temporary View","text":"// Convert flights DataFrame to a temporary view\nflights.createOrReplaceTempView(\"flightsView\")","dateUpdated":"2016-11-02T22:24:58+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_636329356","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:24:58+0100","dateFinished":"2016-11-02T22:24:58+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:341","focus":true},{"title":"Preview Data in an interactive table format","text":"%sql\n\nSELECT * FROM flightsView LIMIT 20","dateUpdated":"2016-11-02T22:25:00+0100","config":{"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"Year","index":0,"aggr":"sum"}],"values":[{"name":"Month","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"Year","index":0,"aggr":"sum"},"yAxis":{"name":"Month","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071482_745333380","id":"20160410-003138_318924232","result":{"code":"SUCCESS","type":"TABLE","msg":"Year\tMonth\tDayofMonth\tDayOfWeek\tDepTime\tCRSDepTime\tArrTime\tCRSArrTime\tUniqueCarrier\tFlightNum\tTailNum\tActualElapsedTime\tCRSElapsedTime\tAirTime\tArrDelay\tDepDelay\tOrigin\tDest\tDistance\tTaxiIn\tTaxiOut\tCancelled\tCancellationCode\tDiverted\tCarrierDelay\tWeatherDelay\tNASDelay\tSecurityDelay\tLateAircraftDelay\n2008\t1\t3\t4\t2003\t1955\t2211\t2225\tWN\t335\tN712SW\t128\t150\t116\t-14\t8\tIAD\tTPA\t810\t4\t8\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t754\t735\t1002\t1000\tWN\t3231\tN772SW\t128\t145\t113\t2\t19\tIAD\tTPA\t810\t5\t10\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t628\t620\t804\t750\tWN\t448\tN428WN\t96\t90\t76\t14\t8\tIND\tBWI\t515\t3\t17\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t926\t930\t1054\t1100\tWN\t1746\tN612SW\t88\t90\t78\t-6\t-4\tIND\tBWI\t515\t3\t7\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1829\t1755\t1959\t1925\tWN\t3920\tN464WN\t90\t90\t77\t34\t34\tIND\tBWI\t515\t3\t10\t0\t\t0\t2\t0\t0\t0\t32\n2008\t1\t3\t4\t1940\t1915\t2121\t2110\tWN\t378\tN726SW\t101\t115\t87\t11\t25\tIND\tJAX\t688\t4\t10\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1937\t1830\t2037\t1940\tWN\t509\tN763SW\t240\t250\t230\t57\t67\tIND\tLAS\t1591\t3\t7\t0\t\t0\t10\t0\t0\t0\t47\n2008\t1\t3\t4\t1039\t1040\t1132\t1150\tWN\t535\tN428WN\t233\t250\t219\t-18\t-1\tIND\tLAS\t1591\t7\t7\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t617\t615\t652\t650\tWN\t11\tN689SW\t95\t95\t70\t2\t2\tIND\tMCI\t451\t6\t19\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1620\t1620\t1639\t1655\tWN\t810\tN648SW\t79\t95\t70\t-16\t0\tIND\tMCI\t451\t3\t6\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t706\t700\t916\t915\tWN\t100\tN690SW\t130\t135\t106\t1\t6\tIND\tMCO\t828\t5\t19\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1644\t1510\t1845\t1725\tWN\t1333\tN334SW\t121\t135\t107\t80\t94\tIND\tMCO\t828\t6\t8\t0\t\t0\t8\t0\t0\t0\t72\n2008\t1\t3\t4\t1426\t1430\t1426\t1425\tWN\t829\tN476WN\t60\t55\t39\t1\t-4\tIND\tMDW\t162\t9\t12\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t715\t715\t720\t710\tWN\t1016\tN765SW\t65\t55\t37\t10\t0\tIND\tMDW\t162\t7\t21\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1702\t1700\t1651\t1655\tWN\t1827\tN420WN\t49\t55\t35\t-4\t2\tIND\tMDW\t162\t4\t10\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1029\t1020\t1021\t1010\tWN\t2272\tN263WN\t52\t50\t37\t11\t9\tIND\tMDW\t162\t6\t9\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1452\t1425\t1640\t1625\tWN\t675\tN286WN\t228\t240\t213\t15\t27\tIND\tPHX\t1489\t7\t8\t0\t\t0\t3\t0\t0\t0\t12\n2008\t1\t3\t4\t754\t745\t940\t955\tWN\t1144\tN778SW\t226\t250\t205\t-15\t9\tIND\tPHX\t1489\t5\t16\t0\t\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1323\t1255\t1526\t1510\tWN\t4\tN674AA\t123\t135\t110\t16\t28\tIND\tTPA\t838\t4\t9\t0\t\t0\t0\t0\t0\t0\t16\n2008\t1\t3\t4\t1416\t1325\t1512\t1435\tWN\t54\tN643SW\t56\t70\t49\t37\t51\tISP\tBWI\t220\t2\t5\t0\t\t0\t12\t0\t0\t0\t25\n","comment":"","msgTable":[[{"key":"Month","value":"2008"},{"key":"Month","value":"1"},{"key":"Month","value":"3"},{"key":"Month","value":"4"},{"key":"Month","value":"2003"},{"key":"Month","value":"1955"},{"key":"Month","value":"2211"},{"key":"Month","value":"2225"},{"key":"Month","value":"WN"},{"key":"Month","value":"335"},{"key":"Month","value":"N712SW"},{"key":"Month","value":"128"},{"key":"Month","value":"150"},{"key":"Month","value":"116"},{"key":"Month","value":"-14"},{"key":"Month","value":"8"},{"key":"Month","value":"IAD"},{"key":"Month","value":"TPA"},{"key":"Month","value":"810"},{"key":"Month","value":"4"},{"key":"Month","value":"8"},{"key":"Month","value":"0"},{"key":"Month","value":""},{"key":"Month","value":"0"},{"key":"Month","value":"NA"},{"key":"Month","value":"NA"},{"key":"Month","value":"NA"},{"key":"Month","value":"NA"},{"key":"Month","value":"NA"}],[{"key":"DayofMonth","value":"2008"},{"key":"DayofMonth","value":"1"},{"key":"DayofMonth","value":"3"},{"key":"DayofMonth","value":"4"},{"key":"DayofMonth","value":"754"},{"key":"DayofMonth","value":"735"},{"key":"DayofMonth","value":"1002"},{"key":"DayofMonth","value":"1000"},{"key":"DayofMonth","value":"WN"},{"key":"DayofMonth","value":"3231"},{"key":"DayofMonth","value":"N772SW"},{"key":"DayofMonth","value":"128"},{"key":"DayofMonth","value":"145"},{"key":"DayofMonth","value":"113"},{"key":"DayofMonth","value":"2"},{"key":"DayofMonth","value":"19"},{"key":"DayofMonth","value":"IAD"},{"key":"DayofMonth","value":"TPA"},{"key":"DayofMonth","value":"810"},{"key":"DayofMonth","value":"5"},{"key":"DayofMonth","value":"10"},{"key":"DayofMonth","value":"0"},{"key":"DayofMonth","value":""},{"key":"DayofMonth","value":"0"},{"key":"DayofMonth","value":"NA"},{"key":"DayofMonth","value":"NA"},{"key":"DayofMonth","value":"NA"},{"key":"DayofMonth","value":"NA"},{"key":"DayofMonth","value":"NA"}],[{"key":"DayOfWeek","value":"2008"},{"key":"DayOfWeek","value":"1"},{"key":"DayOfWeek","value":"3"},{"key":"DayOfWeek","value":"4"},{"key":"DayOfWeek","value":"628"},{"key":"DayOfWeek","value":"620"},{"key":"DayOfWeek","value":"804"},{"key":"DayOfWeek","value":"750"},{"key":"DayOfWeek","value":"WN"},{"key":"DayOfWeek","value":"448"},{"key":"DayOfWeek","value":"N428WN"},{"key":"DayOfWeek","value":"96"},{"key":"DayOfWeek","value":"90"},{"key":"DayOfWeek","value":"76"},{"key":"DayOfWeek","value":"14"},{"key":"DayOfWeek","value":"8"},{"key":"DayOfWeek","value":"IND"},{"key":"DayOfWeek","value":"BWI"},{"key":"DayOfWeek","value":"515"},{"key":"DayOfWeek","value":"3"},{"key":"DayOfWeek","value":"17"},{"key":"DayOfWeek","value":"0"},{"key":"DayOfWeek","value":""},{"key":"DayOfWeek","value":"0"},{"key":"DayOfWeek","value":"NA"},{"key":"DayOfWeek","value":"NA"},{"key":"DayOfWeek","value":"NA"},{"key":"DayOfWeek","value":"NA"},{"key":"DayOfWeek","value":"NA"}],[{"key":"DepTime","value":"2008"},{"key":"DepTime","value":"1"},{"key":"DepTime","value":"3"},{"key":"DepTime","value":"4"},{"key":"DepTime","value":"926"},{"key":"DepTime","value":"930"},{"key":"DepTime","value":"1054"},{"key":"DepTime","value":"1100"},{"key":"DepTime","value":"WN"},{"key":"DepTime","value":"1746"},{"key":"DepTime","value":"N612SW"},{"key":"DepTime","value":"88"},{"key":"DepTime","value":"90"},{"key":"DepTime","value":"78"},{"key":"DepTime","value":"-6"},{"key":"DepTime","value":"-4"},{"key":"DepTime","value":"IND"},{"key":"DepTime","value":"BWI"},{"key":"DepTime","value":"515"},{"key":"DepTime","value":"3"},{"key":"DepTime","value":"7"},{"key":"DepTime","value":"0"},{"key":"DepTime","value":""},{"key":"DepTime","value":"0"},{"key":"DepTime","value":"NA"},{"key":"DepTime","value":"NA"},{"key":"DepTime","value":"NA"},{"key":"DepTime","value":"NA"},{"key":"DepTime","value":"NA"}],[{"key":"CRSDepTime","value":"2008"},{"key":"CRSDepTime","value":"1"},{"key":"CRSDepTime","value":"3"},{"key":"CRSDepTime","value":"4"},{"key":"CRSDepTime","value":"1829"},{"key":"CRSDepTime","value":"1755"},{"key":"CRSDepTime","value":"1959"},{"key":"CRSDepTime","value":"1925"},{"key":"CRSDepTime","value":"WN"},{"key":"CRSDepTime","value":"3920"},{"key":"CRSDepTime","value":"N464WN"},{"key":"CRSDepTime","value":"90"},{"key":"CRSDepTime","value":"90"},{"key":"CRSDepTime","value":"77"},{"key":"CRSDepTime","value":"34"},{"key":"CRSDepTime","value":"34"},{"key":"CRSDepTime","value":"IND"},{"key":"CRSDepTime","value":"BWI"},{"key":"CRSDepTime","value":"515"},{"key":"CRSDepTime","value":"3"},{"key":"CRSDepTime","value":"10"},{"key":"CRSDepTime","value":"0"},{"key":"CRSDepTime","value":""},{"key":"CRSDepTime","value":"0"},{"key":"CRSDepTime","value":"2"},{"key":"CRSDepTime","value":"0"},{"key":"CRSDepTime","value":"0"},{"key":"CRSDepTime","value":"0"},{"key":"CRSDepTime","value":"32"}],[{"key":"ArrTime","value":"2008"},{"key":"ArrTime","value":"1"},{"key":"ArrTime","value":"3"},{"key":"ArrTime","value":"4"},{"key":"ArrTime","value":"1940"},{"key":"ArrTime","value":"1915"},{"key":"ArrTime","value":"2121"},{"key":"ArrTime","value":"2110"},{"key":"ArrTime","value":"WN"},{"key":"ArrTime","value":"378"},{"key":"ArrTime","value":"N726SW"},{"key":"ArrTime","value":"101"},{"key":"ArrTime","value":"115"},{"key":"ArrTime","value":"87"},{"key":"ArrTime","value":"11"},{"key":"ArrTime","value":"25"},{"key":"ArrTime","value":"IND"},{"key":"ArrTime","value":"JAX"},{"key":"ArrTime","value":"688"},{"key":"ArrTime","value":"4"},{"key":"ArrTime","value":"10"},{"key":"ArrTime","value":"0"},{"key":"ArrTime","value":""},{"key":"ArrTime","value":"0"},{"key":"ArrTime","value":"NA"},{"key":"ArrTime","value":"NA"},{"key":"ArrTime","value":"NA"},{"key":"ArrTime","value":"NA"},{"key":"ArrTime","value":"NA"}],[{"key":"CRSArrTime","value":"2008"},{"key":"CRSArrTime","value":"1"},{"key":"CRSArrTime","value":"3"},{"key":"CRSArrTime","value":"4"},{"key":"CRSArrTime","value":"1937"},{"key":"CRSArrTime","value":"1830"},{"key":"CRSArrTime","value":"2037"},{"key":"CRSArrTime","value":"1940"},{"key":"CRSArrTime","value":"WN"},{"key":"CRSArrTime","value":"509"},{"key":"CRSArrTime","value":"N763SW"},{"key":"CRSArrTime","value":"240"},{"key":"CRSArrTime","value":"250"},{"key":"CRSArrTime","value":"230"},{"key":"CRSArrTime","value":"57"},{"key":"CRSArrTime","value":"67"},{"key":"CRSArrTime","value":"IND"},{"key":"CRSArrTime","value":"LAS"},{"key":"CRSArrTime","value":"1591"},{"key":"CRSArrTime","value":"3"},{"key":"CRSArrTime","value":"7"},{"key":"CRSArrTime","value":"0"},{"key":"CRSArrTime","value":""},{"key":"CRSArrTime","value":"0"},{"key":"CRSArrTime","value":"10"},{"key":"CRSArrTime","value":"0"},{"key":"CRSArrTime","value":"0"},{"key":"CRSArrTime","value":"0"},{"key":"CRSArrTime","value":"47"}],[{"key":"UniqueCarrier","value":"2008"},{"key":"UniqueCarrier","value":"1"},{"key":"UniqueCarrier","value":"3"},{"key":"UniqueCarrier","value":"4"},{"key":"UniqueCarrier","value":"1039"},{"key":"UniqueCarrier","value":"1040"},{"key":"UniqueCarrier","value":"1132"},{"key":"UniqueCarrier","value":"1150"},{"key":"UniqueCarrier","value":"WN"},{"key":"UniqueCarrier","value":"535"},{"key":"UniqueCarrier","value":"N428WN"},{"key":"UniqueCarrier","value":"233"},{"key":"UniqueCarrier","value":"250"},{"key":"UniqueCarrier","value":"219"},{"key":"UniqueCarrier","value":"-18"},{"key":"UniqueCarrier","value":"-1"},{"key":"UniqueCarrier","value":"IND"},{"key":"UniqueCarrier","value":"LAS"},{"key":"UniqueCarrier","value":"1591"},{"key":"UniqueCarrier","value":"7"},{"key":"UniqueCarrier","value":"7"},{"key":"UniqueCarrier","value":"0"},{"key":"UniqueCarrier","value":""},{"key":"UniqueCarrier","value":"0"},{"key":"UniqueCarrier","value":"NA"},{"key":"UniqueCarrier","value":"NA"},{"key":"UniqueCarrier","value":"NA"},{"key":"UniqueCarrier","value":"NA"},{"key":"UniqueCarrier","value":"NA"}],[{"key":"FlightNum","value":"2008"},{"key":"FlightNum","value":"1"},{"key":"FlightNum","value":"3"},{"key":"FlightNum","value":"4"},{"key":"FlightNum","value":"617"},{"key":"FlightNum","value":"615"},{"key":"FlightNum","value":"652"},{"key":"FlightNum","value":"650"},{"key":"FlightNum","value":"WN"},{"key":"FlightNum","value":"11"},{"key":"FlightNum","value":"N689SW"},{"key":"FlightNum","value":"95"},{"key":"FlightNum","value":"95"},{"key":"FlightNum","value":"70"},{"key":"FlightNum","value":"2"},{"key":"FlightNum","value":"2"},{"key":"FlightNum","value":"IND"},{"key":"FlightNum","value":"MCI"},{"key":"FlightNum","value":"451"},{"key":"FlightNum","value":"6"},{"key":"FlightNum","value":"19"},{"key":"FlightNum","value":"0"},{"key":"FlightNum","value":""},{"key":"FlightNum","value":"0"},{"key":"FlightNum","value":"NA"},{"key":"FlightNum","value":"NA"},{"key":"FlightNum","value":"NA"},{"key":"FlightNum","value":"NA"},{"key":"FlightNum","value":"NA"}],[{"key":"TailNum","value":"2008"},{"key":"TailNum","value":"1"},{"key":"TailNum","value":"3"},{"key":"TailNum","value":"4"},{"key":"TailNum","value":"1620"},{"key":"TailNum","value":"1620"},{"key":"TailNum","value":"1639"},{"key":"TailNum","value":"1655"},{"key":"TailNum","value":"WN"},{"key":"TailNum","value":"810"},{"key":"TailNum","value":"N648SW"},{"key":"TailNum","value":"79"},{"key":"TailNum","value":"95"},{"key":"TailNum","value":"70"},{"key":"TailNum","value":"-16"},{"key":"TailNum","value":"0"},{"key":"TailNum","value":"IND"},{"key":"TailNum","value":"MCI"},{"key":"TailNum","value":"451"},{"key":"TailNum","value":"3"},{"key":"TailNum","value":"6"},{"key":"TailNum","value":"0"},{"key":"TailNum","value":""},{"key":"TailNum","value":"0"},{"key":"TailNum","value":"NA"},{"key":"TailNum","value":"NA"},{"key":"TailNum","value":"NA"},{"key":"TailNum","value":"NA"},{"key":"TailNum","value":"NA"}],[{"key":"ActualElapsedTime","value":"2008"},{"key":"ActualElapsedTime","value":"1"},{"key":"ActualElapsedTime","value":"3"},{"key":"ActualElapsedTime","value":"4"},{"key":"ActualElapsedTime","value":"706"},{"key":"ActualElapsedTime","value":"700"},{"key":"ActualElapsedTime","value":"916"},{"key":"ActualElapsedTime","value":"915"},{"key":"ActualElapsedTime","value":"WN"},{"key":"ActualElapsedTime","value":"100"},{"key":"ActualElapsedTime","value":"N690SW"},{"key":"ActualElapsedTime","value":"130"},{"key":"ActualElapsedTime","value":"135"},{"key":"ActualElapsedTime","value":"106"},{"key":"ActualElapsedTime","value":"1"},{"key":"ActualElapsedTime","value":"6"},{"key":"ActualElapsedTime","value":"IND"},{"key":"ActualElapsedTime","value":"MCO"},{"key":"ActualElapsedTime","value":"828"},{"key":"ActualElapsedTime","value":"5"},{"key":"ActualElapsedTime","value":"19"},{"key":"ActualElapsedTime","value":"0"},{"key":"ActualElapsedTime","value":""},{"key":"ActualElapsedTime","value":"0"},{"key":"ActualElapsedTime","value":"NA"},{"key":"ActualElapsedTime","value":"NA"},{"key":"ActualElapsedTime","value":"NA"},{"key":"ActualElapsedTime","value":"NA"},{"key":"ActualElapsedTime","value":"NA"}],[{"key":"CRSElapsedTime","value":"2008"},{"key":"CRSElapsedTime","value":"1"},{"key":"CRSElapsedTime","value":"3"},{"key":"CRSElapsedTime","value":"4"},{"key":"CRSElapsedTime","value":"1644"},{"key":"CRSElapsedTime","value":"1510"},{"key":"CRSElapsedTime","value":"1845"},{"key":"CRSElapsedTime","value":"1725"},{"key":"CRSElapsedTime","value":"WN"},{"key":"CRSElapsedTime","value":"1333"},{"key":"CRSElapsedTime","value":"N334SW"},{"key":"CRSElapsedTime","value":"121"},{"key":"CRSElapsedTime","value":"135"},{"key":"CRSElapsedTime","value":"107"},{"key":"CRSElapsedTime","value":"80"},{"key":"CRSElapsedTime","value":"94"},{"key":"CRSElapsedTime","value":"IND"},{"key":"CRSElapsedTime","value":"MCO"},{"key":"CRSElapsedTime","value":"828"},{"key":"CRSElapsedTime","value":"6"},{"key":"CRSElapsedTime","value":"8"},{"key":"CRSElapsedTime","value":"0"},{"key":"CRSElapsedTime","value":""},{"key":"CRSElapsedTime","value":"0"},{"key":"CRSElapsedTime","value":"8"},{"key":"CRSElapsedTime","value":"0"},{"key":"CRSElapsedTime","value":"0"},{"key":"CRSElapsedTime","value":"0"},{"key":"CRSElapsedTime","value":"72"}],[{"key":"AirTime","value":"2008"},{"key":"AirTime","value":"1"},{"key":"AirTime","value":"3"},{"key":"AirTime","value":"4"},{"key":"AirTime","value":"1426"},{"key":"AirTime","value":"1430"},{"key":"AirTime","value":"1426"},{"key":"AirTime","value":"1425"},{"key":"AirTime","value":"WN"},{"key":"AirTime","value":"829"},{"key":"AirTime","value":"N476WN"},{"key":"AirTime","value":"60"},{"key":"AirTime","value":"55"},{"key":"AirTime","value":"39"},{"key":"AirTime","value":"1"},{"key":"AirTime","value":"-4"},{"key":"AirTime","value":"IND"},{"key":"AirTime","value":"MDW"},{"key":"AirTime","value":"162"},{"key":"AirTime","value":"9"},{"key":"AirTime","value":"12"},{"key":"AirTime","value":"0"},{"key":"AirTime","value":""},{"key":"AirTime","value":"0"},{"key":"AirTime","value":"NA"},{"key":"AirTime","value":"NA"},{"key":"AirTime","value":"NA"},{"key":"AirTime","value":"NA"},{"key":"AirTime","value":"NA"}],[{"key":"ArrDelay","value":"2008"},{"key":"ArrDelay","value":"1"},{"key":"ArrDelay","value":"3"},{"key":"ArrDelay","value":"4"},{"key":"ArrDelay","value":"715"},{"key":"ArrDelay","value":"715"},{"key":"ArrDelay","value":"720"},{"key":"ArrDelay","value":"710"},{"key":"ArrDelay","value":"WN"},{"key":"ArrDelay","value":"1016"},{"key":"ArrDelay","value":"N765SW"},{"key":"ArrDelay","value":"65"},{"key":"ArrDelay","value":"55"},{"key":"ArrDelay","value":"37"},{"key":"ArrDelay","value":"10"},{"key":"ArrDelay","value":"0"},{"key":"ArrDelay","value":"IND"},{"key":"ArrDelay","value":"MDW"},{"key":"ArrDelay","value":"162"},{"key":"ArrDelay","value":"7"},{"key":"ArrDelay","value":"21"},{"key":"ArrDelay","value":"0"},{"key":"ArrDelay","value":""},{"key":"ArrDelay","value":"0"},{"key":"ArrDelay","value":"NA"},{"key":"ArrDelay","value":"NA"},{"key":"ArrDelay","value":"NA"},{"key":"ArrDelay","value":"NA"},{"key":"ArrDelay","value":"NA"}],[{"key":"DepDelay","value":"2008"},{"key":"DepDelay","value":"1"},{"key":"DepDelay","value":"3"},{"key":"DepDelay","value":"4"},{"key":"DepDelay","value":"1702"},{"key":"DepDelay","value":"1700"},{"key":"DepDelay","value":"1651"},{"key":"DepDelay","value":"1655"},{"key":"DepDelay","value":"WN"},{"key":"DepDelay","value":"1827"},{"key":"DepDelay","value":"N420WN"},{"key":"DepDelay","value":"49"},{"key":"DepDelay","value":"55"},{"key":"DepDelay","value":"35"},{"key":"DepDelay","value":"-4"},{"key":"DepDelay","value":"2"},{"key":"DepDelay","value":"IND"},{"key":"DepDelay","value":"MDW"},{"key":"DepDelay","value":"162"},{"key":"DepDelay","value":"4"},{"key":"DepDelay","value":"10"},{"key":"DepDelay","value":"0"},{"key":"DepDelay","value":""},{"key":"DepDelay","value":"0"},{"key":"DepDelay","value":"NA"},{"key":"DepDelay","value":"NA"},{"key":"DepDelay","value":"NA"},{"key":"DepDelay","value":"NA"},{"key":"DepDelay","value":"NA"}],[{"key":"Origin","value":"2008"},{"key":"Origin","value":"1"},{"key":"Origin","value":"3"},{"key":"Origin","value":"4"},{"key":"Origin","value":"1029"},{"key":"Origin","value":"1020"},{"key":"Origin","value":"1021"},{"key":"Origin","value":"1010"},{"key":"Origin","value":"WN"},{"key":"Origin","value":"2272"},{"key":"Origin","value":"N263WN"},{"key":"Origin","value":"52"},{"key":"Origin","value":"50"},{"key":"Origin","value":"37"},{"key":"Origin","value":"11"},{"key":"Origin","value":"9"},{"key":"Origin","value":"IND"},{"key":"Origin","value":"MDW"},{"key":"Origin","value":"162"},{"key":"Origin","value":"6"},{"key":"Origin","value":"9"},{"key":"Origin","value":"0"},{"key":"Origin","value":""},{"key":"Origin","value":"0"},{"key":"Origin","value":"NA"},{"key":"Origin","value":"NA"},{"key":"Origin","value":"NA"},{"key":"Origin","value":"NA"},{"key":"Origin","value":"NA"}],[{"key":"Dest","value":"2008"},{"key":"Dest","value":"1"},{"key":"Dest","value":"3"},{"key":"Dest","value":"4"},{"key":"Dest","value":"1452"},{"key":"Dest","value":"1425"},{"key":"Dest","value":"1640"},{"key":"Dest","value":"1625"},{"key":"Dest","value":"WN"},{"key":"Dest","value":"675"},{"key":"Dest","value":"N286WN"},{"key":"Dest","value":"228"},{"key":"Dest","value":"240"},{"key":"Dest","value":"213"},{"key":"Dest","value":"15"},{"key":"Dest","value":"27"},{"key":"Dest","value":"IND"},{"key":"Dest","value":"PHX"},{"key":"Dest","value":"1489"},{"key":"Dest","value":"7"},{"key":"Dest","value":"8"},{"key":"Dest","value":"0"},{"key":"Dest","value":""},{"key":"Dest","value":"0"},{"key":"Dest","value":"3"},{"key":"Dest","value":"0"},{"key":"Dest","value":"0"},{"key":"Dest","value":"0"},{"key":"Dest","value":"12"}],[{"key":"Distance","value":"2008"},{"key":"Distance","value":"1"},{"key":"Distance","value":"3"},{"key":"Distance","value":"4"},{"key":"Distance","value":"754"},{"key":"Distance","value":"745"},{"key":"Distance","value":"940"},{"key":"Distance","value":"955"},{"key":"Distance","value":"WN"},{"key":"Distance","value":"1144"},{"key":"Distance","value":"N778SW"},{"key":"Distance","value":"226"},{"key":"Distance","value":"250"},{"key":"Distance","value":"205"},{"key":"Distance","value":"-15"},{"key":"Distance","value":"9"},{"key":"Distance","value":"IND"},{"key":"Distance","value":"PHX"},{"key":"Distance","value":"1489"},{"key":"Distance","value":"5"},{"key":"Distance","value":"16"},{"key":"Distance","value":"0"},{"key":"Distance","value":""},{"key":"Distance","value":"0"},{"key":"Distance","value":"NA"},{"key":"Distance","value":"NA"},{"key":"Distance","value":"NA"},{"key":"Distance","value":"NA"},{"key":"Distance","value":"NA"}],[{"key":"TaxiIn","value":"2008"},{"key":"TaxiIn","value":"1"},{"key":"TaxiIn","value":"3"},{"key":"TaxiIn","value":"4"},{"key":"TaxiIn","value":"1323"},{"key":"TaxiIn","value":"1255"},{"key":"TaxiIn","value":"1526"},{"key":"TaxiIn","value":"1510"},{"key":"TaxiIn","value":"WN"},{"key":"TaxiIn","value":"4"},{"key":"TaxiIn","value":"N674AA"},{"key":"TaxiIn","value":"123"},{"key":"TaxiIn","value":"135"},{"key":"TaxiIn","value":"110"},{"key":"TaxiIn","value":"16"},{"key":"TaxiIn","value":"28"},{"key":"TaxiIn","value":"IND"},{"key":"TaxiIn","value":"TPA"},{"key":"TaxiIn","value":"838"},{"key":"TaxiIn","value":"4"},{"key":"TaxiIn","value":"9"},{"key":"TaxiIn","value":"0"},{"key":"TaxiIn","value":""},{"key":"TaxiIn","value":"0"},{"key":"TaxiIn","value":"0"},{"key":"TaxiIn","value":"0"},{"key":"TaxiIn","value":"0"},{"key":"TaxiIn","value":"0"},{"key":"TaxiIn","value":"16"}],[{"key":"TaxiOut","value":"2008"},{"key":"TaxiOut","value":"1"},{"key":"TaxiOut","value":"3"},{"key":"TaxiOut","value":"4"},{"key":"TaxiOut","value":"1416"},{"key":"TaxiOut","value":"1325"},{"key":"TaxiOut","value":"1512"},{"key":"TaxiOut","value":"1435"},{"key":"TaxiOut","value":"WN"},{"key":"TaxiOut","value":"54"},{"key":"TaxiOut","value":"N643SW"},{"key":"TaxiOut","value":"56"},{"key":"TaxiOut","value":"70"},{"key":"TaxiOut","value":"49"},{"key":"TaxiOut","value":"37"},{"key":"TaxiOut","value":"51"},{"key":"TaxiOut","value":"ISP"},{"key":"TaxiOut","value":"BWI"},{"key":"TaxiOut","value":"220"},{"key":"TaxiOut","value":"2"},{"key":"TaxiOut","value":"5"},{"key":"TaxiOut","value":"0"},{"key":"TaxiOut","value":""},{"key":"TaxiOut","value":"0"},{"key":"TaxiOut","value":"12"},{"key":"TaxiOut","value":"0"},{"key":"TaxiOut","value":"0"},{"key":"TaxiOut","value":"0"},{"key":"TaxiOut","value":"25"}]],"columnNames":[{"name":"Year","index":0,"aggr":"sum"},{"name":"Month","index":1,"aggr":"sum"},{"name":"DayofMonth","index":2,"aggr":"sum"},{"name":"DayOfWeek","index":3,"aggr":"sum"},{"name":"DepTime","index":4,"aggr":"sum"},{"name":"CRSDepTime","index":5,"aggr":"sum"},{"name":"ArrTime","index":6,"aggr":"sum"},{"name":"CRSArrTime","index":7,"aggr":"sum"},{"name":"UniqueCarrier","index":8,"aggr":"sum"},{"name":"FlightNum","index":9,"aggr":"sum"},{"name":"TailNum","index":10,"aggr":"sum"},{"name":"ActualElapsedTime","index":11,"aggr":"sum"},{"name":"CRSElapsedTime","index":12,"aggr":"sum"},{"name":"AirTime","index":13,"aggr":"sum"},{"name":"ArrDelay","index":14,"aggr":"sum"},{"name":"DepDelay","index":15,"aggr":"sum"},{"name":"Origin","index":16,"aggr":"sum"},{"name":"Dest","index":17,"aggr":"sum"},{"name":"Distance","index":18,"aggr":"sum"},{"name":"TaxiIn","index":19,"aggr":"sum"},{"name":"TaxiOut","index":20,"aggr":"sum"},{"name":"Cancelled","index":21,"aggr":"sum"},{"name":"CancellationCode","index":22,"aggr":"sum"},{"name":"Diverted","index":23,"aggr":"sum"},{"name":"CarrierDelay","index":24,"aggr":"sum"},{"name":"WeatherDelay","index":25,"aggr":"sum"},{"name":"NASDelay","index":26,"aggr":"sum"},{"name":"SecurityDelay","index":27,"aggr":"sum"},{"name":"LateAircraftDelay","index":28,"aggr":"sum"}],"rows":[["2008","1","3","4","2003","1955","2211","2225","WN","335","N712SW","128","150","116","-14","8","IAD","TPA","810","4","8","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","754","735","1002","1000","WN","3231","N772SW","128","145","113","2","19","IAD","TPA","810","5","10","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","628","620","804","750","WN","448","N428WN","96","90","76","14","8","IND","BWI","515","3","17","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","926","930","1054","1100","WN","1746","N612SW","88","90","78","-6","-4","IND","BWI","515","3","7","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","1829","1755","1959","1925","WN","3920","N464WN","90","90","77","34","34","IND","BWI","515","3","10","0","","0","2","0","0","0","32"],["2008","1","3","4","1940","1915","2121","2110","WN","378","N726SW","101","115","87","11","25","IND","JAX","688","4","10","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","1937","1830","2037","1940","WN","509","N763SW","240","250","230","57","67","IND","LAS","1591","3","7","0","","0","10","0","0","0","47"],["2008","1","3","4","1039","1040","1132","1150","WN","535","N428WN","233","250","219","-18","-1","IND","LAS","1591","7","7","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","617","615","652","650","WN","11","N689SW","95","95","70","2","2","IND","MCI","451","6","19","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","1620","1620","1639","1655","WN","810","N648SW","79","95","70","-16","0","IND","MCI","451","3","6","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","706","700","916","915","WN","100","N690SW","130","135","106","1","6","IND","MCO","828","5","19","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","1644","1510","1845","1725","WN","1333","N334SW","121","135","107","80","94","IND","MCO","828","6","8","0","","0","8","0","0","0","72"],["2008","1","3","4","1426","1430","1426","1425","WN","829","N476WN","60","55","39","1","-4","IND","MDW","162","9","12","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","715","715","720","710","WN","1016","N765SW","65","55","37","10","0","IND","MDW","162","7","21","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","1702","1700","1651","1655","WN","1827","N420WN","49","55","35","-4","2","IND","MDW","162","4","10","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","1029","1020","1021","1010","WN","2272","N263WN","52","50","37","11","9","IND","MDW","162","6","9","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","1452","1425","1640","1625","WN","675","N286WN","228","240","213","15","27","IND","PHX","1489","7","8","0","","0","3","0","0","0","12"],["2008","1","3","4","754","745","940","955","WN","1144","N778SW","226","250","205","-15","9","IND","PHX","1489","5","16","0","","0","NA","NA","NA","NA","NA"],["2008","1","3","4","1323","1255","1526","1510","WN","4","N674AA","123","135","110","16","28","IND","TPA","838","4","9","0","","0","0","0","0","0","16"],["2008","1","3","4","1416","1325","1512","1435","WN","54","N643SW","56","70","49","37","51","ISP","BWI","220","2","5","0","","0","12","0","0","0","25"]]},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:25:00+0100","dateFinished":"2016-11-02T22:25:01+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:342","focus":true},{"title":"Register a User Defined Function (UDF)","text":"%spark\n\n// Register a helper UDF to find delayed flights\n// Note that this is a UDF specific for use with the sparkSession\n\n// Assume:\n//  if ArrDelay is not available then Delayed = False\n//  if ArrDelay > 15 min then Delayed = True else False\n\nspark.udf.register(\"isDelayedUDF\", (time: String) => if (time == \"NA\") 0 else if (time.toInt > 15) 1 else 0)","dateUpdated":"2016-11-02T22:25:04+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071483_744948631","id":"20160410-003138_40384312","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres31: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:25:04+0100","dateFinished":"2016-11-02T22:25:05+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:343","focus":true},{"title":"Compare Total Number of Delayed Flights by Carrier","text":"%sql\n--- Compare Total Number of Delayed Flights by Carrier\nSELECT UniqueCarrier, SUM(isDelayedUDF(DepDelay)) AS NumDelays FROM flightsView GROUP BY UniqueCarrier","dateUpdated":"2016-11-02T09:28:04+0100","config":{"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"pieChart","height":296,"optionOpen":false,"keys":[{"name":"UniqueCarrier","index":0,"aggr":"sum"}],"values":[{"name":"NumDelays","index":1,"aggr":"sum"}],"groups":[],"scatter":{"yAxis":{"name":"NumDelays","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071483_744948631","id":"20160410-003138_134299332","result":{"code":"SUCCESS","type":"TABLE","msg":"UniqueCarrier\tNumDelays\nXE\t1014\nWN\t18573\n","comment":"","msgTable":[[{"key":"NumDelays","value":"XE"},{"key":"NumDelays","value":"1014"}],[{"value":"WN"},{"value":"18573"}]],"columnNames":[{"name":"UniqueCarrier","index":0,"aggr":"sum"},{"name":"NumDelays","index":1,"aggr":"sum"}],"rows":[["XE","1014"],["WN","18573"]]},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:28:04+0100","dateFinished":"2016-11-02T09:28:06+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:344"},{"title":"Compare Total Delayed Time (min) by Carrier","text":"%sql\n--- Compare Total Delayed Time (min) by Carrier\nSELECT UniqueCarrier, SUM(DepDelay) AS TotalTimeDelay FROM flightsView GROUP BY UniqueCarrier","dateUpdated":"2016-11-02T09:28:10+0100","config":{"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"UniqueCarrier","index":0,"aggr":"sum"}],"values":[{"name":"TotalTimeDelay","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"UniqueCarrier","index":0,"aggr":"sum"},"yAxis":{"name":"TotalTimeDelay","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071483_744948631","id":"20160410-003138_163559927","result":{"code":"SUCCESS","type":"TABLE","msg":"UniqueCarrier\tTotalTimeDelay\nXE\t47505.0\nWN\t978547.0\n","comment":"","msgTable":[[{"key":"TotalTimeDelay","value":"XE"},{"key":"TotalTimeDelay","value":"47505.0"}],[{"value":"WN"},{"value":"978547.0"}]],"columnNames":[{"name":"UniqueCarrier","index":0,"aggr":"sum"},{"name":"TotalTimeDelay","index":1,"aggr":"sum"}],"rows":[["XE","47505.0"],["WN","978547.0"]]},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:28:11+0100","dateFinished":"2016-11-02T09:28:12+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:345"},{"title":"Find Average Distance Travelled by Carrier","text":"%sql\n--- Find Average Distance Travelled by Carrier\nSELECT UniqueCarrier, avg(Distance) AS AvgDistanceTraveled FROM flightsView GROUP BY UniqueCarrier ORDER BY AvgDistanceTraveled DESC","dateUpdated":"2016-11-02T09:28:16+0100","config":{"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"pieChart","height":300,"optionOpen":false,"keys":[{"name":"UniqueCarrier","index":0,"aggr":"sum"}],"values":[{"name":"AvgDistanceTraveled","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"UniqueCarrier","index":0,"aggr":"sum"},"yAxis":{"name":"AvgDistanceTraveled","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071483_744948631","id":"20160410-003138_172624929","result":{"code":"SUCCESS","type":"TABLE","msg":"UniqueCarrier\tAvgDistanceTraveled\nXE\t738.0677880571909\nWN\t623.7926638668864\n","comment":"","msgTable":[[{"key":"AvgDistanceTraveled","value":"XE"},{"key":"AvgDistanceTraveled","value":"738.0677880571909"}],[{"value":"WN"},{"value":"623.7926638668864"}]],"columnNames":[{"name":"UniqueCarrier","index":0,"aggr":"sum"},{"name":"AvgDistanceTraveled","index":1,"aggr":"sum"}],"rows":[["XE","738.0677880571909"],["WN","623.7926638668864"]]},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:28:16+0100","dateFinished":"2016-11-02T09:28:18+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:346"},{"title":"Find Out When Most Flights Get Delayed by Day of Week","text":"%sql\n\nSELECT DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END\nORDER BY DayOfWeek","dateUpdated":"2016-11-02T09:28:25+0100","config":{"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"DayOfWeek","index":0,"aggr":"sum"}],"values":[{"name":"Count","index":2,"aggr":"sum"}],"groups":[{"name":"Delay","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"DayOfWeek","index":0,"aggr":"sum"},"yAxis":{"name":"Delay","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071483_744948631","id":"20160410-003138_56774606","result":{"code":"SUCCESS","type":"TABLE","msg":"DayOfWeek\tDelay\tCount\n1\tok\t11863\n1\tdelayed\t2656\n2\tdelayed\t1799\n2\tok\t12911\n3\tok\t13260\n3\tdelayed\t1434\n4\tdelayed\t4808\n4\tok\t12271\n5\tok\t11003\n5\tdelayed\t3514\n6\tok\t9407\n6\tdelayed\t1878\n7\tok\t9698\n7\tdelayed\t3498\n","comment":"","msgTable":[[{"key":"Delay","value":"1"},{"key":"Delay","value":"ok"},{"key":"Delay","value":"11863"}],[{"key":"Count","value":"1"},{"key":"Count","value":"delayed"},{"key":"Count","value":"2656"}],[{"value":"2"},{"value":"delayed"},{"value":"1799"}],[{"value":"2"},{"value":"ok"},{"value":"12911"}],[{"value":"3"},{"value":"ok"},{"value":"13260"}],[{"value":"3"},{"value":"delayed"},{"value":"1434"}],[{"value":"4"},{"value":"delayed"},{"value":"4808"}],[{"value":"4"},{"value":"ok"},{"value":"12271"}],[{"value":"5"},{"value":"ok"},{"value":"11003"}],[{"value":"5"},{"value":"delayed"},{"value":"3514"}],[{"value":"6"},{"value":"ok"},{"value":"9407"}],[{"value":"6"},{"value":"delayed"},{"value":"1878"}],[{"value":"7"},{"value":"ok"},{"value":"9698"}],[{"value":"7"},{"value":"delayed"},{"value":"3498"}]],"columnNames":[{"name":"DayOfWeek","index":0,"aggr":"sum"},{"name":"Delay","index":1,"aggr":"sum"},{"name":"Count","index":2,"aggr":"sum"}],"rows":[["1","ok","11863"],["1","delayed","2656"],["2","delayed","1799"],["2","ok","12911"],["3","ok","13260"],["3","delayed","1434"],["4","delayed","4808"],["4","ok","12271"],["5","ok","11003"],["5","delayed","3514"],["6","ok","9407"],["6","delayed","1878"],["7","ok","9698"],["7","delayed","3498"]]},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:28:25+0100","dateFinished":"2016-11-02T09:28:27+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:347"},{"title":"Find Out When Most Flights Get Delayed by Hour","text":"%sql\n\nSELECT CAST(CRSDepTime / 100 AS INT) AS Hour, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY CAST(CRSDepTime / 100 AS INT), CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END\nORDER BY Hour","dateUpdated":"2016-11-02T09:28:31+0100","config":{"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"stackedAreaChart","height":300,"optionOpen":false,"keys":[{"name":"Hour","index":0,"aggr":"sum"}],"values":[{"name":"Count","index":2,"aggr":"sum"}],"groups":[{"name":"Delay","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Hour","index":0,"aggr":"sum"},"yAxis":{"name":"Delay","index":1,"aggr":"sum"}}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071483_744948631","id":"20160410-003138_728063774","result":{"code":"SUCCESS","type":"TABLE","msg":"Hour\tDelay\tCount\n6\tdelayed\t208\n6\tok\t6126\n7\tok\t7274\n7\tdelayed\t372\n8\tok\t5956\n8\tdelayed\t547\n9\tdelayed\t761\n9\tok\t5861\n10\tdelayed\t903\n10\tok\t5783\n11\tdelayed\t986\n11\tok\t5115\n12\tdelayed\t1128\n12\tok\t5174\n13\tok\t5225\n13\tdelayed\t1346\n14\tok\t4434\n14\tdelayed\t1335\n15\tdelayed\t1562\n15\tok\t4818\n16\tdelayed\t1750\n16\tok\t4810\n17\tok\t4632\n17\tdelayed\t1802\n18\tok\t4720\n18\tdelayed\t1912\n19\tok\t4461\n19\tdelayed\t2001\n20\tdelayed\t1684\n20\tok\t3526\n21\tok\t2286\n21\tdelayed\t1194\n22\tok\t212\n22\tdelayed\t96\n","comment":"","msgTable":[[{"key":"Delay","value":"6"},{"key":"Delay","value":"delayed"},{"key":"Delay","value":"208"}],[{"key":"Count","value":"6"},{"key":"Count","value":"ok"},{"key":"Count","value":"6126"}],[{"value":"7"},{"value":"ok"},{"value":"7274"}],[{"value":"7"},{"value":"delayed"},{"value":"372"}],[{"value":"8"},{"value":"ok"},{"value":"5956"}],[{"value":"8"},{"value":"delayed"},{"value":"547"}],[{"value":"9"},{"value":"delayed"},{"value":"761"}],[{"value":"9"},{"value":"ok"},{"value":"5861"}],[{"value":"10"},{"value":"delayed"},{"value":"903"}],[{"value":"10"},{"value":"ok"},{"value":"5783"}],[{"value":"11"},{"value":"delayed"},{"value":"986"}],[{"value":"11"},{"value":"ok"},{"value":"5115"}],[{"value":"12"},{"value":"delayed"},{"value":"1128"}],[{"value":"12"},{"value":"ok"},{"value":"5174"}],[{"value":"13"},{"value":"ok"},{"value":"5225"}],[{"value":"13"},{"value":"delayed"},{"value":"1346"}],[{"value":"14"},{"value":"ok"},{"value":"4434"}],[{"value":"14"},{"value":"delayed"},{"value":"1335"}],[{"value":"15"},{"value":"delayed"},{"value":"1562"}],[{"value":"15"},{"value":"ok"},{"value":"4818"}],[{"value":"16"},{"value":"delayed"},{"value":"1750"}],[{"value":"16"},{"value":"ok"},{"value":"4810"}],[{"value":"17"},{"value":"ok"},{"value":"4632"}],[{"value":"17"},{"value":"delayed"},{"value":"1802"}],[{"value":"18"},{"value":"ok"},{"value":"4720"}],[{"value":"18"},{"value":"delayed"},{"value":"1912"}],[{"value":"19"},{"value":"ok"},{"value":"4461"}],[{"value":"19"},{"value":"delayed"},{"value":"2001"}],[{"value":"20"},{"value":"delayed"},{"value":"1684"}],[{"value":"20"},{"value":"ok"},{"value":"3526"}],[{"value":"21"},{"value":"ok"},{"value":"2286"}],[{"value":"21"},{"value":"delayed"},{"value":"1194"}],[{"value":"22"},{"value":"ok"},{"value":"212"}],[{"value":"22"},{"value":"delayed"},{"value":"96"}]],"columnNames":[{"name":"Hour","index":0,"aggr":"sum"},{"name":"Delay","index":1,"aggr":"sum"},{"name":"Count","index":2,"aggr":"sum"}],"rows":[["6","delayed","208"],["6","ok","6126"],["7","ok","7274"],["7","delayed","372"],["8","ok","5956"],["8","delayed","547"],["9","delayed","761"],["9","ok","5861"],["10","delayed","903"],["10","ok","5783"],["11","delayed","986"],["11","ok","5115"],["12","delayed","1128"],["12","ok","5174"],["13","ok","5225"],["13","delayed","1346"],["14","ok","4434"],["14","delayed","1335"],["15","delayed","1562"],["15","ok","4818"],["16","delayed","1750"],["16","ok","4810"],["17","ok","4632"],["17","delayed","1802"],["18","ok","4720"],["18","delayed","1912"],["19","ok","4461"],["19","delayed","2001"],["20","delayed","1684"],["20","ok","3526"],["21","ok","2286"],["21","delayed","1194"],["22","ok","212"],["22","delayed","96"]]},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T09:28:31+0100","dateFinished":"2016-11-02T09:28:33+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:348"},{"title":"Putting it all together","text":"%md\n\nNow, with all these basic analytics in Part 1 and 2 of this lab, you should have a fairly good idea which flights have the most delays, on which routes, from which airports, at which hour, on which days of the week and months of the year, and be able to start making meaningful predictions yourself. That's the power of using Spark with Zeppelin -- having one powerful environment to perform data munging, wrangling, visualization and more on large datasets.","dateUpdated":"2016-10-17T09:52:54+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476730922035_-399971943","id":"20161017-210202_1567750763","result":{"code":"SUCCESS","type":"HTML","msg":"<p>Now, with all these basic analytics in Part 1 and 2 of this lab, you should have a fairly good idea which flights have the most delays, on which routes, from which airports, at which hour, on which days of the week and months of the year, and be able to start making meaningful predictions yourself. That's the power of using Spark with Zeppelin &ndash; having one powerful environment to perform data munging, wrangling, visualization and more on large datasets.</p>\n"},"dateCreated":"2016-10-17T09:02:02+0200","dateStarted":"2016-10-17T09:52:52+0200","dateFinished":"2016-10-17T09:52:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:349"},{"text":"%md\n\n## Persisting Results / Data\n\nFinally, let's persist some of our results by saving our DataFrames in an optimized file format called ORC.\n","dateUpdated":"2016-10-17T09:43:46+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476732443401_-479473759","id":"20161017-212723_1255606607","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Persisting Results / Data</h2>\n<p>Finally, let's persist some of our results by saving our DataFrames in an optimized file format called ORC.</p>\n"},"dateCreated":"2016-10-17T09:27:23+0200","dateStarted":"2016-10-17T09:43:44+0200","dateFinished":"2016-10-17T09:43:44+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:350"},{"text":"%angular\n\n<h3>Save Modes</h3>\n\n<style>\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n</style>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Mode (Scala/Java)</th>\n    <th>Meaning</th>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.ErrorIfExists (default)</code></td>\n    <td>When saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.</td>\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Append</code></td>\n    <td>When saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Overwrite</code></td>\n    <td>Overwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Ignore</code></td>\n    <td>Ignore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.</td>\n  </tr>\n</table>\n\n</br>\nNote: Save operations can optionally take a <code>SaveMode</code>, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing an <code>Overwrite</code>, the data will be deleted before writing out the new data.","dateUpdated":"2016-10-17T09:44:57+0200","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071484_743024887","id":"20160410-003138_206029012","result":{"code":"SUCCESS","type":"ANGULAR","msg":"<h3>Save Modes</h3>\n\n<style>\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n</style>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Mode (Scala/Java)</th>\n    <th>Meaning</th>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.ErrorIfExists (default)</code></td>\n    <td>When saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.</td>\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Append</code></td>\n    <td>When saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Overwrite</code></td>\n    <td>Overwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Ignore</code></td>\n    <td>Ignore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.</td>\n  </tr>\n</table>\n\n</br>\nNote: Save operations can optionally take a <code>SaveMode</code>, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing an <code>Overwrite</code>, the data will be deleted before writing out the new data."},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-17T09:44:54+0200","dateFinished":"2016-10-17T09:44:54+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:351"},{"title":"Save to ORC file","text":"%spark\n\nimport org.apache.spark.sql.SaveMode\n\n// Save and Overwrite our new DataFrame to an ORC file\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).save(\"flightsWithDelays.orc\")","dateUpdated":"2016-11-02T22:25:43+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071484_743024887","id":"20160410-003138_985965720","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.sql.SaveMode\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:25:43+0100","dateFinished":"2016-11-02T22:25:45+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:352","focus":true},{"title":"What's ORC again?","text":"%md\n\nORC (Optimized Row-Column) is a self-describing, type-aware columnar file format designed for Hadoop workloads. It is optimized for large streaming reads, but with integrated support for finding required rows quickly. Storing data in a columnar format lets the reader read, decompress, and process only the values that are required for the current query. Because ORC files are type-aware, the writer chooses the most appropriate encoding for the type and builds an internal index as the file is written. More information [here](https://orc.apache.org/).","dateUpdated":"2016-10-17T09:45:12+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476693374699_1333232214","id":"20161017-103614_1279292421","result":{"code":"SUCCESS","type":"HTML","msg":"<p>ORC (Optimized Row-Column) is a self-describing, type-aware columnar file format designed for Hadoop workloads. It is optimized for large streaming reads, but with integrated support for finding required rows quickly. Storing data in a columnar format lets the reader read, decompress, and process only the values that are required for the current query. Because ORC files are type-aware, the writer chooses the most appropriate encoding for the type and builds an internal index as the file is written. More information <a href=\"https://orc.apache.org/\">here</a>.</p>\n"},"dateCreated":"2016-10-17T10:36:14+0200","dateStarted":"2016-10-17T10:40:26+0200","dateFinished":"2016-10-17T10:40:26+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:353"},{"title":"Load from ORC file","text":"%spark\n\n// Load results back from ORC file\nval test = spark.read.format(\"orc\").load(\"flightsWithDelays.orc\")\n\n// Assert both DataFrames of the same size.\n//   Note that if assertion succeeds no warning messages will be printed\nassert (test.count == flightsWithDelays.count, println(\"Assertion Fail: Files are of different sizes.\"))\n\ntest.show(10)","dateUpdated":"2016-11-02T22:25:56+0100","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071484_743024887","id":"20160410-003138_1142035788","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntest: org.apache.spark.sql.DataFrame = [Year: int, Month: int ... 5 more fields]\n+----+-----+----------+-------------+---------+--------+---------+\n|Year|Month|DayofMonth|UniqueCarrier|FlightNum|DepDelay|IsDelayed|\n+----+-----+----------+-------------+---------+--------+---------+\n|2008|    1|         3|           WN|      335|       8|        0|\n|2008|    1|         3|           WN|     3231|      19|        1|\n|2008|    1|         3|           WN|      448|       8|        0|\n|2008|    1|         3|           WN|     1746|      -4|        0|\n|2008|    1|         3|           WN|     3920|      34|        1|\n|2008|    1|         3|           WN|      378|      25|        1|\n|2008|    1|         3|           WN|      509|      67|        1|\n|2008|    1|         3|           WN|      535|      -1|        0|\n|2008|    1|         3|           WN|       11|       2|        0|\n|2008|    1|         3|           WN|      810|       0|        0|\n+----+-----+----------+-------------+---------+--------+---------+\nonly showing top 10 rows\n\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-11-02T22:25:56+0100","dateFinished":"2016-11-02T22:25:58+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:354","focus":true},{"text":"%md\n\nWe can also create permanent tables, instead of temporary views, using `saveAsTable`. The resulting table will still exist even after your Spark program has restarted.","dateUpdated":"2016-10-17T09:40:57+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476732195601_1993571222","id":"20161017-212315_1033823107","result":{"code":"SUCCESS","type":"HTML","msg":"<p>We can also create permanent tables, instead of temporary views, using <code>saveAsTable</code>. The resulting table will still exist even after your Spark program has restarted.</p>\n"},"dateCreated":"2016-10-17T09:23:15+0200","dateStarted":"2016-10-17T09:40:57+0200","dateFinished":"2016-10-17T09:40:57+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:355"},{"title":"Save DataFrame as Permanent Table","text":"flightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).saveAsTable(\"flightswithdelaystbl\")","dateUpdated":"2016-11-02T22:26:12+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476732108778_482941416","id":"20161017-212148_1432557096","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2016-10-17T09:21:48+0200","dateStarted":"2016-11-02T22:26:12+0100","dateFinished":"2016-11-02T22:26:15+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:356","focus":true},{"title":"Show Tables/Views","text":"%sql\n\nSHOW TABLES\n\n-- Note that flightsWithDelaysTbl is a permanent table instead of a temporary view!","dateUpdated":"2016-11-02T22:26:18+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tableName","index":0,"aggr":"sum"}],"values":[{"name":"isTemporary","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tableName","index":0,"aggr":"sum"},"yAxis":{"name":"isTemporary","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476732148029_1507740631","id":"20161017-212228_2044087527","result":{"code":"SUCCESS","type":"TABLE","msg":"tableName\tisTemporary\nflightsview\tfalse\nflightswithdelaystbl\tfalse\nflightsview\ttrue\nwordcounts\ttrue\nwords\ttrue\n","comment":"","msgTable":[[{"key":"isTemporary","value":"flightsview"},{"key":"isTemporary","value":"false"}],[{"value":"flightswithdelaystbl"},{"value":"false"}],[{"value":"flightsview"},{"value":"true"}],[{"value":"wordcounts"},{"value":"true"}],[{"value":"words"},{"value":"true"}]],"columnNames":[{"name":"tableName","index":0,"aggr":"sum"},{"name":"isTemporary","index":1,"aggr":"sum"}],"rows":[["flightsview","false"],["flightswithdelaystbl","false"],["flightsview","true"],["wordcounts","true"],["words","true"]]},"dateCreated":"2016-10-17T09:22:28+0200","dateStarted":"2016-11-02T22:26:18+0100","dateFinished":"2016-11-02T22:26:18+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:357","focus":true},{"title":"Querying a Permanent Table","text":"%sql\n\nSELECT COUNT(1) AS Total from flightswithdelaystbl  -- As you can see, there's no difference in querying a temporary view vs a permanent table","dateUpdated":"2016-11-02T22:26:22+0100","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"Total","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"Total","index":0,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476732527670_-1377707554","id":"20161017-212847_790820933","result":{"code":"SUCCESS","type":"TABLE","msg":"Total\n100000\n","comment":"","msgTable":[[{"value":"100000"}]],"columnNames":[{"name":"Total","index":0,"aggr":"sum"}],"rows":[["100000"]]},"dateCreated":"2016-10-17T09:28:47+0200","dateStarted":"2016-11-02T22:26:22+0100","dateFinished":"2016-11-02T22:26:22+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:358","focus":true},{"title":"Final Words","text":"%md\n\nThis should get you started working in Scala with DataFrame, Dataset and SQL Spark APIs that are part of the Spark SQL Module. You should now have the basic tools and code samples to start working on your own data sets: from brining in/downloading datasets, to moving them from local storage to HDFS, to transforming datasets into Spark DataFrames/Datasets/temporary views, querying the data, performing basic calcuations, visualizing, and finally persisiting your results. That's a great start!","dateUpdated":"2016-10-17T09:59:04+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476733697357_-358833935","id":"20161017-214817_1787337666","result":{"code":"SUCCESS","type":"HTML","msg":"<p>This should get you started working in Scala with DataFrame, Dataset and SQL Spark APIs that are part of the Spark SQL Module. You should now have the basic tools and code samples to start working on your own data sets: from brining in/downloading datasets, to moving them from local storage to HDFS, to transforming datasets into Spark DataFrames/Datasets/temporary views, querying the data, performing basic calcuations, visualizing, and finally persisiting your results. That's a great start!</p>\n"},"dateCreated":"2016-10-17T09:48:17+0200","dateStarted":"2016-10-17T09:59:03+0200","dateFinished":"2016-10-17T09:59:03+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:359"},{"title":"Additional Resources","text":"%md\n\nWe hope you've enjoyed this introductory lab. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type=question) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hadoop Summit: Slides & Videos](http://hadoopsummit.org/san-jose/agenda/) - a collection of presentations on Spark, Hadoop, and other Big Data related topics.\n4. [Hortonworks Apache Spark Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html) - official Spark documentation.\n5. [Hortonworks Apache Zeppelin Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html) - official Zeppelin documentation.\n#\n#\n#","dateUpdated":"2016-10-18T02:37:39+0200","config":{"tableHide":false,"editorMode":"ace/mode/markdown","colWidth":10,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071488_729173926","id":"20160410-003138_2048237853","result":{"code":"SUCCESS","type":"HTML","msg":"<p>We hope you've enjoyed this introductory lab. Below are additional resources that you should find useful:</p>\n<ol>\n<li><a href=\"http://hortonworks.com/tutorials/#tuts-developers\">Hortonworks Apache Spark Tutorials</a> are your natural next step where you can explore Spark in more depth.</li>\n<li><a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\">Hortonworks Community Connection (HCC)</a> is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.</li>\n<li><a href=\"http://hadoopsummit.org/san-jose/agenda/\">Hadoop Summit: Slides &amp; Videos</a> - a collection of presentations on Spark, Hadoop, and other Big Data related topics.</li>\n<li><a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html\">Hortonworks Apache Spark Docs</a> - official Spark documentation.</li>\n<li><a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html\">Hortonworks Apache Zeppelin Docs</a> - official Zeppelin documentation.<h1></h1>\n<h1></h1>\n<h1></h1>\n</li>\n</ol>\n"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-18T02:37:37+0200","dateFinished":"2016-10-18T02:37:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:360"},{"text":"%angular\n</br>\n<center>\n<a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\" target='_blank'>\n  <img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" style=\"width:125px;height:125px;border:0;\" align=\"middle\">\n</a>\n</center>","dateUpdated":"2016-10-18T02:38:32+0200","config":{"editorMode":"ace/mode/scala","colWidth":2,"editorHide":true,"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476368071488_729173926","id":"20160410-003138_1663715025","result":{"code":"SUCCESS","type":"ANGULAR","msg":"</br>\n<center>\n<a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\" target='_blank'>\n  <img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" style=\"width:125px;height:125px;border:0;\" align=\"middle\">\n</a>\n</center>"},"dateCreated":"2016-10-13T04:14:31+0200","dateStarted":"2016-10-18T02:38:29+0200","dateFinished":"2016-10-18T02:38:29+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:361"},{"text":"","dateUpdated":"2016-10-18T02:36:15+0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476794164826_539764654","id":"20161018-143604_1206436852","dateCreated":"2016-10-18T02:36:04+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:362"}],"name":"Lab 101 DW - Spark SQL Module (Scala)","id":"2C1NCRJG4","angularObjects":{"2C17KRZ89:shared_process":[],"2BYY922YJ:shared_process":[],"2BZFM3RS5:shared_process":[],"2BWWMQD15:shared_process":[],"2BX9JK9RG:shared_process":[],"2BYS6EPN8:shared_process":[],"2BXM16U2W:shared_process":[],"2BZKN45ZE:shared_process":[],"2BYJTTQ3C:shared_process":[],"2BY4FUMA6:shared_process":[],"2BX12UTS8:shared_process":[],"2BXFZDPB4:shared_process":[],"2BXPTJA1N:shared_process":[],"2BYHZF59F:shared_process":[],"2BZ33SWBS:shared_process":[],"2BZ233MCE:shared_process":[],"2BXTNQ9NR:shared_process":[],"2BZB9FFTE:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}